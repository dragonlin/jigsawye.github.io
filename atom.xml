<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JIGSAWYE</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jigsawye.com/"/>
  <updated>2016-06-21T04:39:50.000Z</updated>
  <id>http://jigsawye.com/</id>
  
  <author>
    <name>Evan Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 OSX 使用 Fish shell 取代 bash/zsh</title>
    <link href="http://jigsawye.com/2016/06/20/install-fish-shell-on-os-x/"/>
    <id>http://jigsawye.com/2016/06/20/install-fish-shell-on-os-x/</id>
    <published>2016-06-20T14:46:22.000Z</published>
    <updated>2016-06-21T04:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Mac 上用 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">zsh</a> 已經有一陣子了，最讓我詬病的就是 zsh 的 auto suggestion 及 auto completion 速度相當慢，而且有一些很奇怪的問題（bugs?）。最近 <a href="https://fishshell.com/" target="_blank" rel="external">fish</a> 這個 shell 好像很紅，索性就把 zsh 換成 fish 了。</p>
<p>裝完後不只速度 ++，連 plugin / theme 的套件管理都有（<a href="https://github.com/fisherman/fisherman" target="_blank" rel="external">fisherman</a>），使用起來相當快速方便，要說缺點呢，就是與 bash 不相容，所以很常在寫 bash 的捧油只能看看囉。</p>
<a id="more"></a>
<blockquote>
<p>Updated on 2016/06/21<br>寫完這篇隔天就收到 oh-my-fish 已經不 maintain 了，所以換成 fisherman。</p>
</blockquote>
<h2 id="fish"><a href="#fish" class="headerlink" title="fish"></a>fish</h2><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p>只要用 homebrew 安裝即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install fish</div></pre></td></tr></table></figure>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>不論你預設是 bash 還是 zsh，執行 <code>fish</code> 就能切到 fish shell 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fish</div></pre></td></tr></table></figure>
<h4 id="Set-fish-as-default-shell"><a href="#Set-fish-as-default-shell" class="headerlink" title="Set fish as default shell"></a>Set fish as default shell</h4><p>當然不可能每次開 terminal 就切換一次，我們可以把 fish 改成 terminal 的 default shell：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"/usr/local/bin/fish"</span> | sudo tee <span class="_">-a</span> /etc/shells</div><div class="line">$ chsh <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/fish</div></pre></td></tr></table></figure>
<h2 id="fisherman"><a href="#fisherman" class="headerlink" title="fisherman"></a>fisherman</h2><p><code>fisherman</code> 跟 <code>oh-my-zsh</code> 用起來是截然不同的感受，oh-my-zsh 是把 plugins 全部都裝好了，只需要啟動，fishermane 用起來則像是 <code>npm</code> 或 <code>composer</code> 的套件管理器一樣。</p>
<h4 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h4><p>curl 拉下來就行了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -Lo ~/.config/fish/<span class="built_in">functions</span>/fisher.fish --create-dirs git.io/fisher</div></pre></td></tr></table></figure>
<h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><p>直接看官方 README 吧：<a href="https://github.com/fisherman/fisherman" target="_blank" rel="external">https://github.com/fisherman/fisherman</a></p>
<h2 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h2><p>如果你有在使用 nvm 的話，因為 nvm 是透過 <code>source ~/.nvm/nvm.sh</code> 執行，但因為 fish 不支援 bash，所以這支檔案裡的 shell 會直接爆給你看。</p>
<p>要解決這個問題的話直接透過 fisherman 安裝 nvm 的 <a href="https://github.com/fisherman/nvm" target="_blank" rel="external">plugin</a> 即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fisher nvm</div></pre></td></tr></table></figure>
<p>這樣還會發生一個問題，就是 nvm 不會自動使用 default 的 node 版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">fish: Unknown <span class="built_in">command</span> <span class="string">'node'</span></div></pre></td></tr></table></figure>
<p>用編輯器打開 <code>~/.config/fish/config.fish</code> 新增下面這行即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bass <span class="built_in">source</span> ~/.nvm/nvm.sh</div></pre></td></tr></table></figure>
<p>bass 是讓 fish 可以執行 bash 的一個橋接工具，透過 bass 就能執行 bash 了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Mac 上用 &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;zsh&lt;/a&gt; 已經有一陣子了，最讓我詬病的就是 zsh 的 auto suggestion 及 auto completion 速度相當慢，而且有一些很奇怪的問題（bugs?）。最近 &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish&lt;/a&gt; 這個 shell 好像很紅，索性就把 zsh 換成 fish 了。&lt;/p&gt;
&lt;p&gt;裝完後不只速度 ++，連 plugin / theme 的套件管理都有（&lt;a href=&quot;https://github.com/fisherman/fisherman&quot;&gt;fisherman&lt;/a&gt;），使用起來相當快速方便，要說缺點呢，就是與 bash 不相容，所以很常在寫 bash 的捧油只能看看囉。&lt;/p&gt;
    
    </summary>
    
      <category term="-note" scheme="http://jigsawye.com/categories/note/"/>
    
    
      <category term="-terminal" scheme="http://jigsawye.com/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>告別 JavaScript 的 Promise！迎接 Async/Await 的到來</title>
    <link href="http://jigsawye.com/2016/04/18/understanding-javascript-async-await/"/>
    <id>http://jigsawye.com/2016/04/18/understanding-javascript-async-await/</id>
    <published>2016-04-18T11:33:55.000Z</published>
    <updated>2016-04-19T12:37:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一個自己的 <a href="https://github.com/jigsawye/koa2-boilerplate" target="_blank" rel="external">API boilerplate</a>，選用了 <a href="https://github.com/koajs/koa" target="_blank" rel="external">koa</a> 這個 library。而其中除了 stable 的 <code>1.x</code> 外，它還 release <code>2.x</code>！有什麼不同呢？<code>1.x</code> 是用 generator 來實作，而到了 <code>2.x</code> 竟然是用 Async/Await！身為一個熱血碼農，怎能錯過這個進場 Async/Await 的大好機會 XD。</p>
<a id="more"></a>
<h2 id="說說-Promise"><a href="#說說-Promise" class="headerlink" title="說說 Promise"></a>說說 Promise</h2><p>在很久以前，那是個 JavaScript callback hell 的年代，為了處理這種處境，有人提出了 Promise 的寫法。而 Promise 也是近年開發 JavaScript 程式不可或缺的一門基礎，在 ES2015 也將 Promise 納為其中的一項標準。</p>
<h4 id="非同步-function"><a href="#非同步-function" class="headerlink" title="非同步 function"></a>非同步 function</h4><p>關於非同步的文章網路上已經很多了，就不在此贅述。在這裡我直接先以 Promise 實作一個簡易的非同步程式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> posts = [</div><div class="line">  &#123; <span class="attr">title</span>: <span class="string">'Post 1'</span>, <span class="attr">content</span>: <span class="string">'fake content'</span>&#125;,</div><div class="line">  &#123; <span class="attr">title</span>: <span class="string">'Post 2'</span>, <span class="attr">content</span>: <span class="string">'fake content'</span>&#125;,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">const</span> getPosts = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(posts), <span class="number">1000</span>));</div></pre></td></tr></table></figure>
<p>我習慣寫 ES2015 的 arrow function，如果看不習慣的話，在一般 function 會像下面這樣：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosts</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      resolve(posts);</div><div class="line">    &#125; , <span class="number">3000</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這支程式會回傳一個 Promise，而模擬在 1 秒後 resolve 一個模擬的 <code>posts</code>。</p>
<h4 id="呼叫一個非同步-function"><a href="#呼叫一個非同步-function" class="headerlink" title="呼叫一個非同步 function"></a>呼叫一個非同步 function</h4><p>在 Promise 的做法中，我們就會這樣來實作取得 posts 的程式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> printPostsToConsole = <span class="function"><span class="params">()</span> =&gt;</span> getPosts().then(<span class="function"><span class="params">posts</span> =&gt;</span> <span class="built_in">console</span>.log(posts));</div><div class="line"></div><div class="line">printPostsToConsole();</div></pre></td></tr></table></figure>
<p>除此之外還會加上 error handler：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> printPostsToConsole = <span class="function"><span class="params">()</span> =&gt;</span> getPosts()</div><div class="line">  .then(<span class="function"><span class="params">posts</span> =&gt;</span> <span class="built_in">console</span>.log(posts))</div><div class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</div><div class="line"></div><div class="line">printPostsToConsole();</div></pre></td></tr></table></figure>
<h2 id="如果是-Async-Await？"><a href="#如果是-Async-Await？" class="headerlink" title="如果是 Async/Await？"></a>如果是 Async/Await？</h2><p>Async/Await 被規範在 ES2016 的標準中，很多的討論都指向 Async/Await 會是非同步的終極解決方案。</p>
<h4 id="用-Async-Await-處理非同步-function"><a href="#用-Async-Await-處理非同步-function" class="headerlink" title="用 Async/Await 處理非同步 function"></a>用 Async/Await 處理非同步 function</h4><p>換成 Async/Await 的話，就不必寫下 <code>.then()</code> 了！就像同步的程式一般，不必理會它是否為非同步。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> printPostsToConsole = <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> posts = <span class="keyword">await</span> getPosts();</div><div class="line">  <span class="built_in">console</span>.log(posts);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">printPostsToConsole();</div></pre></td></tr></table></figure>
<p>也可以寫成這樣：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">printPostsToConsole</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> posts = <span class="keyword">await</span> getPosts();</div><div class="line">  <span class="built_in">console</span>.log(posts);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">printPostsToConsole();</div></pre></td></tr></table></figure>
<p>宣告在 <code>printPostsToConsole</code> 的 <code>async</code> 表示該 function 是個非同步的。而在 function 內 <code>getPosts</code> 之前的 <code>await</code> 表示要等待這個非同步的結果回傳後才會繼續執行，也就是說這個 function 內的程式都變為同步了！</p>
<p>當然在也要加上 error handler。在 Async/Await 中請使用 <code>try/catch</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> printPostsToConsole = <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">const</span> posts = <span class="keyword">await</span> getPosts();</div><div class="line">    <span class="built_in">console</span>.log(posts);</div><div class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="現在就開始用-Async-Await！"><a href="#現在就開始用-Async-Await！" class="headerlink" title="現在就開始用 Async/Await！"></a>現在就開始用 Async/Await！</h2><h4 id="在前端"><a href="#在前端" class="headerlink" title="在前端"></a>在前端</h4><p>如何在現在的環境實作 Async/Await 呢？其實如果有在寫 Front-end（尤其是 React），基本上應該已經使用了 <a href="babeljs.io">babel</a>。如果要使用 Async/Await，presets 除了原本的 <code>es2015</code> 外，只要加上 <code>stage-3</code>：</p>
<figure class="highlight json"><figcaption><span>.bebalrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-3"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或是將 <code>transform-async-to-generator</code> 加入 plugins 就行了：</p>
<figure class="highlight json"><figcaption><span>.bebalrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>],</div><div class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-async-to-generator"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在後端"><a href="#在後端" class="headerlink" title="在後端"></a>在後端</h4><p>在 backend 的情況則比較不同，雖然一樣要透過 babel，不過請裝 <a href="babel-preset-es2015-node4">es2015-node4</a> 或是 <a href="https://github.com/alekseykulikov/babel-preset-es2015-node5" target="_blank" rel="external">es2015-node5</a>（根據你的 node 版本做選擇），其餘則跟前端一樣。</p>
<p>接著如果要讓你的程式能夠執行 Async/Await，請額外建立一個檔案，並 require <code>babel-register</code> 及你程式的 entry：</p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'babel-register'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'../app.js'</span>);</div></pre></td></tr></table></figure>
<p>接著只要用 node 執行 <code>index.js</code> 就行了。</p>
<p>關於詳細的設定可以參考我的 <a href="https://github.com/jigsawye/koa2-boilerplate" target="_blank" rel="external">koa2-boilerplate</a></p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>緊接在 ES2015 之後的 ES2016 也增加了不少的新 feature，除了 Async/Await 也有 <a href="https://github.com/sebmarkbage/ecmascript-rest-spread" target="_blank" rel="external">object-rest-spread</a>、<a href="https://github.com/tc39/ecma262/blob/master/workingdocs/callconstructor.md" target="_blank" rel="external">class-constructor-call</a>、<a href="https://github.com/jeffmo/es-class-fields-and-static-properties" target="_blank" rel="external">class-properties</a>等等。</p>
<p>在 ES2015 泛用的現在，其實有機會的話可以慢慢接觸 ES2016 的功能了，對開發可以增添一股助力！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一個自己的 &lt;a href=&quot;https://github.com/jigsawye/koa2-boilerplate&quot;&gt;API boilerplate&lt;/a&gt;，選用了 &lt;a href=&quot;https://github.com/koajs/koa&quot;&gt;koa&lt;/a&gt; 這個 library。而其中除了 stable 的 &lt;code&gt;1.x&lt;/code&gt; 外，它還 release &lt;code&gt;2.x&lt;/code&gt;！有什麼不同呢？&lt;code&gt;1.x&lt;/code&gt; 是用 generator 來實作，而到了 &lt;code&gt;2.x&lt;/code&gt; 竟然是用 Async/Await！身為一個熱血碼農，怎能錯過這個進場 Async/Await 的大好機會 XD。&lt;/p&gt;
    
    </summary>
    
      <category term="tutorial" scheme="http://jigsawye.com/categories/tutorial/"/>
    
    
      <category term="nodejs" scheme="http://jigsawye.com/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://jigsawye.com/tags/javascript/"/>
    
      <category term="es2015" scheme="http://jigsawye.com/tags/es2015/"/>
    
      <category term="es2016" scheme="http://jigsawye.com/tags/es2016/"/>
    
  </entry>
  
  <entry>
    <title>在 OSX 使用 Homebrew 打造精巧的 Laravel 開發環境</title>
    <link href="http://jigsawye.com/2016/02/01/setup-laravel-development-environment-with-homebrew/"/>
    <id>http://jigsawye.com/2016/02/01/setup-laravel-development-environment-with-homebrew/</id>
    <published>2016-02-01T09:08:14.000Z</published>
    <updated>2016-02-03T11:16:29.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tip"><br>建議你熟悉 Terminal 的操作再參考本篇，否則容易把系統環境搞亂。<br></div>

<p>在開發 Laravel Application 時，新手可能使用 *AMP 的系統環境整合包，而大多數人會選擇官方所提供的 <a href="https://laravel.tw/docs/5.2/homestead" target="_blank" rel="external">Homestead</a>。但 Homestead 其實就是一包很大包的虛擬機再配上 Vargrant，曾幾何時我也是使用 Homestead，但是因為我的小 Macbook Air 實在是受不了虛擬機容量一大包，又吃一堆記憶體。</p>
<p>雖然標題是寫 Laravel，但是要應用在其他的 PHP Application 也是可行的。本篇就以 Homebrew 為主軸，打造 Laravel 的開發環境。</p>
<a id="more"></a>
<h2 id="啥？Homebrew"><a href="#啥？Homebrew" class="headerlink" title="啥？Homebrew"></a>啥？Homebrew</h2><p>如同 ubuntu 有 <code>apt-get</code>、CentOS 有 <code>yum</code> 一樣，<a href="http://brew.sh/index_zh-tw.html" target="_blank" rel="external">Homebrew</a> 就是 OSX 的套件管理器。不同的是前者都是系統內建的，而 Homebrew 則是因為 OSX 本身沒有這種東西，所以就有大神為 OSX 打造了套件管理器。</p>
<h2 id="需要什麼？"><a href="#需要什麼？" class="headerlink" title="需要什麼？"></a>需要什麼？</h2><p>在開始之前，先說說開發 Laravel 需要哪些需求？</p>
<h3 id="PHP-CLI"><a href="#PHP-CLI" class="headerlink" title="PHP-CLI"></a>PHP-CLI</h3><p>Laravel 是目前在 PHP 中最熱門的 Framework，其實除了透過 *AMP 指向 <code>public</code> 資料夾及使用 Homestead 外，Laravel 也提供了 command line 的方式啟動 development server。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ php artisan serve</div><div class="line">Laravel development server started on http://localhost:8000/</div></pre></td></tr></table></figure>
<p>只要在專案目錄中執行 <code>php artisan serve</code>，就會執行 development server。也就是說我們至少需要 php-cli 來執行 development server。</p>
<blockquote>
<p>PHP-CLI 為 PHP Command Line Interface，也就是 Command Line 的 PHP 執行環境。</p>
</blockquote>
<h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><p>沒錯，開發一個 Web Application 一定需要資料庫，而我平常是使用 MariaDB，所以我們也必須安裝 MariaDB。</p>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>而我平常在開發的時候，會把 Cache、Session、及 Queue 的 Driver 都設定為 Redis，所以我們會安裝 Redis。</p>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>所以我們必須透過 Homebrew 安裝這些東西：</p>
<ul>
<li>php</li>
<li>mariadb</li>
<li>redis</li>
</ul>
<h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><h4 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h4><p>開始之前，當然必須先安裝 <a href="http://brew.sh/index_zh-tw.html" target="_blank" rel="external">Homebrew</a>，官方網站已有提供指令進行安裝，打開 terminal 並輸入即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>此指令會透過 curl 下載官方安裝檔，並透過 ruby 執行。他會在你的電腦安裝 homebrew。</p>
</blockquote>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>Homebrew 的使用方式很簡單，以下介紹幾個常用指令：</p>
<ul>
<li><code>brew update</code>：更新 Homebrew。</li>
<li><code>brew search wget</code>：透過 <code>brew search</code> 可以搜尋套件，範例為搜尋名字有 wget 的套件。</li>
<li><code>brew install wget</code>：你可以使用 <code>brew intsall</code> 來安裝套件，範例會安裝 wget。</li>
</ul>
<p>更多指令可以輸入 <code>brew help</code>，或參考<a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md" target="_blank" rel="external">官方的 FAQ</a>。</p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><h4 id="安裝-1"><a href="#安裝-1" class="headerlink" title="安裝"></a>安裝</h4><p>當然，我們首先必須安裝 PHP，我們先執行以下指令尋找 php：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew search php</div></pre></td></tr></table></figure>
<p>你應該會看到非常多的 php，像是 <code>homebrew/php/php53</code>、<code>homebrew/php/php54</code>⋯⋯一直到最新的 <code>homebrew/php/php70</code>。而 php 7.0 有相容舊版本，所以我是使用 php 7.0 開發，所以我們來搜尋一下 php 7.0：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew search php70</div></pre></td></tr></table></figure>
<p>你會看到 PHP 7.0，及 PHP 7.0 的 extenstions。我們直接安裝 php70 即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install php70</div></pre></td></tr></table></figure>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>安裝完後，執行以下指令看看是否有安裝完成：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ php -v</div><div class="line">PHP 7.0.2 (cli) (built: Jan  7 2016 10:40:26) ( NTS )</div><div class="line">Copyright (c) 1997-2015 The PHP Group</div><div class="line">Zend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies</div></pre></td></tr></table></figure>
<p>你可以進入一個 Laravel 專案，並執行 development server 看看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ laravel new awesome_homebrew</div><div class="line">$ <span class="built_in">cd</span> awesome_homebrew</div><div class="line">$ php artisan serve</div><div class="line">Laravel development server started on http://localhost:8000/</div></pre></td></tr></table></figure>
<p>你也可以指定 Port：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ php artisan serve --port=8080</div><div class="line">Laravel development server started on http://localhost:8080/</div></pre></td></tr></table></figure>
<p>如果是一般的 PHP 專案，可以用以下方式開啟 development server：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ php -S localhost:8000 -t public</div><div class="line">PHP 7.0.2 Development Server started at Mon Feb  1 17:02:58 2016</div><div class="line">Listening on http://localhost:8000</div><div class="line">Document root is /Users/jigsawye/Projects/laravel/demo/public</div><div class="line">Press Ctrl-C to quit.</div></pre></td></tr></table></figure>
<p>其中 <code>localhost:8000</code> 的部分是指你要開在哪個 Host，後面的 public 則是選擇你 <code>indxe.php</code> 的目錄，也就是 Application 進入點。</p>
<h3 id="MariaDB-1"><a href="#MariaDB-1" class="headerlink" title="MariaDB"></a>MariaDB</h3><h4 id="安裝-2"><a href="#安裝-2" class="headerlink" title="安裝"></a>安裝</h4><p>安裝方式一樣，先搜尋再安裝：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew search mariadb</div><div class="line">$ brew install mariadb</div></pre></td></tr></table></figure>
<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p>安裝完成後，Homebrew 會提示你可以使用以下指令開啟 MySQL：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql.server start</div><div class="line">Starting MySQL</div><div class="line">. SUCCESS!</div></pre></td></tr></table></figure>
<p>然後你可以連接至你的 MySQL：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysql -uroot</div></pre></td></tr></table></figure>
<h3 id="Redis-1"><a href="#Redis-1" class="headerlink" title="Redis"></a>Redis</h3><h4 id="安裝-3"><a href="#安裝-3" class="headerlink" title="安裝"></a>安裝</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew search redis</div><div class="line">$ brew install redis</div></pre></td></tr></table></figure>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><p>同樣的，Homebrew 提示使用以下指令開啟 Redis：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ redis-server /usr/<span class="built_in">local</span>/etc/redis.conf</div><div class="line">5725:M 01 Feb 15:53:36.291 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 2560).</div><div class="line">                _._</div><div class="line">           _.-``__ <span class="string">''</span>-._</div><div class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 3.0.7 (00000000/0) 64 bit</div><div class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._</div><div class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></div><div class="line"> |`-._`-...-` __...-.``-._|'` _.-<span class="string">'|     Port: 6379</span></div><div class="line"> |    `-._   `._    /     _.-'    |     PID: 5725</div><div class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span></div><div class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></div><div class="line"> |    `-._`-._        _.-'_.-<span class="string">'    |           http://redis.io</span></div><div class="line">  `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span></div><div class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></div><div class="line"> |    `-._`-._        _.-'_.-<span class="string">'    |</span></div><div class="line">  `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span></div><div class="line">      `-._    `-.__.-<span class="string">'    _.-'</span></div><div class="line">          `-._        _.-<span class="string">'</span></div><div class="line">              `-.__.-'</div><div class="line"></div><div class="line">5725:M 01 Feb 15:53:36.293 <span class="comment"># Server started, Redis version 3.0.7</span></div><div class="line">5725:M 01 Feb 15:53:36.293 * DB loaded from disk: 0.000 seconds</div><div class="line">5725:M 01 Feb 15:53:36.293 * The server is now ready to accept connections on port 6379</div></pre></td></tr></table></figure>
<p>不過你會發現，Redis 會佔用一個 terminal，相當不便。</p>
<h3 id="Homebrew-Services"><a href="#Homebrew-Services" class="headerlink" title="Homebrew Services"></a>Homebrew Services</h3><p>相信有些人可能會發現，在啟動 MariaDB 及 Redis 時，指令有些微的不同，沒有一個統一管理這些 services 的工具，像是 ubuntu 的 <code>service &lt;servicename&gt; start</code>。雖然 Homebrew 有提供 <code>launchctl</code> 來管理，不過操作起來實在是太麻煩了。其實 Homebrew 額外有提供一個 services 的管理工具，透過這個工具就可以統一管理所有的 services。</p>
<h4 id="安裝-4"><a href="#安裝-4" class="headerlink" title="安裝"></a>安裝</h4><p>執行以下指令安裝：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew tap homebrew/services</div></pre></td></tr></table></figure>
<p>如果你剛剛有透過指令啟動 MariaDB 與 Redis，現在我們先將它關閉。Redis 直接透過 <code>Ctrl + C</code> 關閉即可，MariaDB 請使用以下指令關閉：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mysql.server stop</div><div class="line">Shutting down MySQL</div><div class="line">... SUCCESS!</div><div class="line">`</div></pre></td></tr></table></figure>
<h4 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h4><p>使用以下指令可以查看目前所安裝的 services：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ brew services list</div><div class="line">Name    Status  User Plist</div><div class="line">mariadb stopped</div><div class="line">php70   stopped</div><div class="line">redis   stopped</div></pre></td></tr></table></figure>
<p>很方便吧！接著我們來啟動 MariaDB 及 Redis：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ brew services start mariadb</div><div class="line">==&gt; Successfully started `mariadb` (label: homebrew.mxcl.mariadb)</div><div class="line"></div><div class="line">$ brew services start redis</div><div class="line">==&gt; Successfully started `redis` (label: homebrew.mxcl.redis)</div></pre></td></tr></table></figure>
<p>查看一下啟用之後的 services 列表：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ brew sercies list</div><div class="line">Name    Status  User     Plist</div><div class="line">mariadb started jigsawye /Users/jigsawye/Library/LaunchAgents/homebrew.mxcl.mariadb.plist</div><div class="line">php70   stopped</div><div class="line">redis   started jigsawye /Users/jigsawye/Library/LaunchAgents/homebrew.mxcl.redis.plist</div></pre></td></tr></table></figure>
<p>若要關閉 servies，執行 <code>brew services stop &lt;servicename&gt;</code> 即可！</p>
<h2 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h2><h3 id="多版本-PHP-切換"><a href="#多版本-PHP-切換" class="headerlink" title="多版本 PHP 切換"></a>多版本 PHP 切換</h3><p>在一些專案可能需不同的 PHP 版本來執行，以下就說明如何接換多版本的 PHP。</p>
<h4 id="安裝其他版本的-PHP"><a href="#安裝其他版本的-PHP" class="headerlink" title="安裝其他版本的 PHP"></a>安裝其他版本的 PHP</h4><p>像前面說明的一樣，我們可以直接安裝其他版本的 PHP：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ brew install php56</div><div class="line">Error: Cannot install homebrew/php/php56 because conflicting formulae are installed.</div><div class="line"></div><div class="line">  php70: because different php versions install the same binaries.</div><div class="line"></div><div class="line">Please `brew unlink php70` before continuing.</div><div class="line"></div><div class="line">Unlinking removes a formula<span class="string">'s symlinks from /usr/local. You can</span></div><div class="line">link the formula again after the install finishes. You can --force this</div><div class="line">install, but the build may fail or cause obscure side-effects in the</div><div class="line">resulting software.</div></pre></td></tr></table></figure>
<p>你應該看到這個錯誤，他的意思是指你已經安裝了其他版本的 PHP，請 <code>unlink</code> 其他版本後再安裝。<code>unlink</code> 意指你必須將原本綁的 <code>php70</code> 給卸除掉（並非移除），再接著安裝。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew unlink php70</div><div class="line">$ brew install php56</div></pre></td></tr></table></figure>
<p>接著就可以查看 PHP 版本，你應該切換成 PHP 5.6：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ php -v</div><div class="line">PHP 5.6.17 (cli) (built: Jan  8 2016 10:27:48)</div><div class="line">Copyright (c) 1997-2015 The PHP Group</div><div class="line">Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies</div></pre></td></tr></table></figure>
<h4 id="切換回-PHP-7-0"><a href="#切換回-PHP-7-0" class="headerlink" title="切換回 PHP 7.0"></a>切換回 PHP 7.0</h4><p>若要切換回去也相當簡單，<code>unlink</code> PHP 5.6 再 <code>link</code> PHP 7.0 即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ brew unlink php56</div><div class="line">Unlinking /usr/<span class="built_in">local</span>/Cellar/php56/5.6.17... 18 symlinks removed</div><div class="line">$ brew link php70</div><div class="line">Linking /usr/<span class="built_in">local</span>/Cellar/php70/7.0.2... 17 symlinks created</div><div class="line">$ php -v</div><div class="line">PHP 7.0.2 (cli) (built: Jan  7 2016 10:40:26) ( NTS )</div><div class="line">Copyright (c) 1997-2015 The PHP Group</div><div class="line">Zend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies</div></pre></td></tr></table></figure>
<h3 id="PHP-extenstions"><a href="#PHP-extenstions" class="headerlink" title="PHP extenstions"></a>PHP extenstions</h3><p>有時你可能需要安裝 PHP 的 extenstions，像是為了產生 PHPUnit 的 coverage report 就必須安裝 Xdebug，為了提升執行速度則裝 OPCache。</p>
<h4 id="安裝-extenstions"><a href="#安裝-extenstions" class="headerlink" title="安裝 extenstions"></a>安裝 extenstions</h4><p>所有的 PHP extenstions 都是以 <code>phpXX-*</code> 來命名，也就是說如果你現在使用 PHP 7.0，那麼就會是 <code>php70-*</code>。讓我們來搜尋 PHP 7.0 有哪些 extenstions 可以安裝：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ brew search php70</div><div class="line">homebrew/php/php70                  homebrew/php/php70-imagick          homebrew/php/php70-mongodb          homebrew/php/php70-pthreads</div><div class="line">homebrew/php/php70-amqp             homebrew/php/php70-intl             homebrew/php/php70-msgpack          homebrew/php/php70-rdkafka</div><div class="line">homebrew/php/php70-apcu             homebrew/php/php70-kafka            homebrew/php/php70-mustache         homebrew/php/php70-redis</div><div class="line">homebrew/php/php70-apcu-bc          homebrew/php/php70-libsodium        homebrew/php/php70-oauth            homebrew/php/php70-snmp</div><div class="line">homebrew/php/php70-ast              homebrew/php/php70-lzf              homebrew/php/php70-opcache          homebrew/php/php70-tidy</div><div class="line">homebrew/php/php70-blitz            homebrew/php/php70-mailparse        homebrew/php/php70-pcntl            homebrew/php/php70-uuid</div><div class="line">homebrew/php/php70-ev               homebrew/php/php70-mcrypt           homebrew/php/php70-pdo-dblib        homebrew/php/php70-v8js</div><div class="line">homebrew/php/php70-gmp              homebrew/php/php70-mecab            homebrew/php/php70-pdo-pgsql        homebrew/php/php70-xdebug</div><div class="line">homebrew/php/php70-hprose           homebrew/php/php70-memcached        homebrew/php/php70-pspell           homebrew/php/php70-yaml</div></pre></td></tr></table></figure>
<p>你會看到一拖車的 extenstions，這邊我以 Xdebug 為例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install php70-xdebug</div></pre></td></tr></table></figure>
<p>然後看看你的 PHP 版本，Xdebug 應該已經安裝完成：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ php -v</div><div class="line">PHP 7.0.2 (cli) (built: Jan  7 2016 10:40:26) ( NTS )</div><div class="line">Copyright (c) 1997-2015 The PHP Group</div><div class="line">Zend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies</div><div class="line">    with Xdebug v2.4.0RC3, Copyright (c) 2002-2015, by Derick Rethans</div></pre></td></tr></table></figure>
<h4 id="關閉-extenstions"><a href="#關閉-extenstions" class="headerlink" title="關閉 extenstions"></a>關閉 extenstions</h4><p>所有的 extenstions 啟用檔案都會存放在 <code>/usr/local/etc/php/X.X/conf.d/ext-*.ini</code>，以剛剛安裝的 Xdebug 為例，他的檔案會存放在 <code>/usr/local/etc/php/7.0/conf.d/ext-xdebug.ini</code>。若要關閉該 extenstions，用編輯器編輯他即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /usr/<span class="built_in">local</span>/etc/php/7.0/conf.d/ext-xdebug.ini</div></pre></td></tr></table></figure>
<p>檔案內容很簡單：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[xdebug]</div><div class="line">zend_extension=<span class="string">"/usr/local/opt/php70-xdebug/xdebug.so"</span></div></pre></td></tr></table></figure>
<p>若要關閉，把第二行註解掉在存檔即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[xdebug]</div><div class="line"><span class="comment"># zend_extension="/usr/local/opt/php70-xdebug/xdebug.so"</span></div></pre></td></tr></table></figure>
<p>註解完後就關閉了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ php -v</div><div class="line">PHP 7.0.2 (cli) (built: Jan  7 2016 10:40:26) ( NTS )</div><div class="line">Copyright (c) 1997-2015 The PHP Group</div><div class="line">Zend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies</div></pre></td></tr></table></figure>
<h2 id="Done！"><a href="#Done！" class="headerlink" title="Done！"></a>Done！</h2><p>到此就完成囉，其實安裝起來不會很困難，操作起來也很簡單。相比 *AMP 與 Homestead，使用的資源及容量也輕巧很多。希望本篇可以提供給操作 terminal 一段時間的人做參考，畢竟自幹環境比起一鍵安裝包安心多了 XD，想裝就裝，想砍就砍！</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tip&quot;&gt;&lt;br&gt;建議你熟悉 Terminal 的操作再參考本篇，否則容易把系統環境搞亂。&lt;br&gt;&lt;/div&gt;

&lt;p&gt;在開發 Laravel Application 時，新手可能使用 *AMP 的系統環境整合包，而大多數人會選擇官方所提供的 &lt;a href=&quot;https://laravel.tw/docs/5.2/homestead&quot;&gt;Homestead&lt;/a&gt;。但 Homestead 其實就是一包很大包的虛擬機再配上 Vargrant，曾幾何時我也是使用 Homestead，但是因為我的小 Macbook Air 實在是受不了虛擬機容量一大包，又吃一堆記憶體。&lt;/p&gt;
&lt;p&gt;雖然標題是寫 Laravel，但是要應用在其他的 PHP Application 也是可行的。本篇就以 Homebrew 為主軸，打造 Laravel 的開發環境。&lt;/p&gt;
    
    </summary>
    
      <category term="notes" scheme="http://jigsawye.com/categories/notes/"/>
    
    
      <category term="terminal" scheme="http://jigsawye.com/tags/terminal/"/>
    
      <category term="php" scheme="http://jigsawye.com/tags/php/"/>
    
      <category term="laravel" scheme="http://jigsawye.com/tags/laravel/"/>
    
      <category term="mariadb" scheme="http://jigsawye.com/tags/mariadb/"/>
    
      <category term="redis" scheme="http://jigsawye.com/tags/redis/"/>
    
      <category term="homebrew" scheme="http://jigsawye.com/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title>在 laravel 5 實作瀏覽器推播通知</title>
    <link href="http://jigsawye.com/2015/12/22/push-notification-to-user-in-laravel-5/"/>
    <id>http://jigsawye.com/2015/12/22/push-notification-to-user-in-laravel-5/</id>
    <published>2015-12-21T17:01:00.000Z</published>
    <updated>2016-02-04T06:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在逛 <a href="https://phphub.org" target="_blank" rel="external">PHPHub</a> 時剛好看到<a href="https://phphub.org/topics/1585" target="_blank" rel="external">這篇</a>，想著之前也想做類似 Facebook 的通知服務，剛好之前也有碰過一陣子的 socket.io，所以就試著實做看看了。不過推播通知在手機上是相當常見的，但在 Web 上不知為何卻相當少見，也可能是我見識太淺了，看過的網站太少XD。</p>
<p><a href="https://github.com/jigsawye/laravel-push-notification-demo" target="_blank" rel="external">本文的原始碼</a></p>
<a id="more"></a>
<!-- toc -->
<h2 id="起手式"><a href="#起手式" class="headerlink" title="起手式"></a>起手式</h2><p>首先我們需要先建 Laravel 專案：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ laravel new notification</div><div class="line">$ <span class="built_in">cd</span> notification</div><div class="line">$ composer install</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>設定你的 <code>.env</code>，除了資料庫外我們還會使用到<strong>隊列（Queue）</strong>及<strong>廣播（broadcast）</strong>，看起來會像：</p>
<figure class="highlight bash"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">QUEUE_DRIVER=redis</div><div class="line">BROADCAST_DRIVER=redis</div><div class="line">...</div></pre></td></tr></table></figure>
<p>要使用 Redis 必須在 Composer 安裝 <code>predis/predis</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer require predis/predis</div></pre></td></tr></table></figure>
<p>接著執行遷移，跟 5.2 提供的 Auth scaffold（幫我們把 Auth 的部分連 View 都建完）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ php artisan migrate</div><div class="line">$ php artisan make:auth</div></pre></td></tr></table></figure></p>
<p>試試看應用程式有沒有正常執行，最後新增兩個使用者，看要在瀏覽器直接建立，或是其他方式也可以。</p>
<h2 id="什麼是隊列"><a href="#什麼是隊列" class="headerlink" title="什麼是隊列"></a>什麼是隊列</h2><p><a href="https://laravel.tw/docs/5.1/queues#introduction" target="_blank" rel="external">隊列</a>簡單來說就像是 JavaScript 的非同步機制，讓你把一個耗時的工作丟給別人做，你的程式會跳過這部分繼續執行。最常見到的案例就是寄 e-mail 跟簡訊。</p>
<h2 id="什麼是廣播"><a href="#什麼是廣播" class="headerlink" title="什麼是廣播"></a>什麼是廣播</h2><p>我們會利用 Laravel 的<a href="https://laravel.tw/docs/5.1/events#broadcasting-events" target="_blank" rel="external">廣播事件</a>做推送通知的服務，開始之前建議大概瀏覽一下文件，廣播的方式大概如下圖：</p>
<img src="/2015/12/22/push-notification-to-user-in-laravel-5/01.png" alt="01.png" title="">
<p>流程如下：</p>
<ul>
<li>在 Laravel 執行一個推播通知事件</li>
<li>推播通知事件的資訊會推送至 Redis 中</li>
<li>Node 端會訂閱該 Redis 的頻道，接收到推播通知事件的資訊</li>
<li>透過 websocket 將推播通知送給使用者</li>
</ul>
<h2 id="建立推播通知事件"><a href="#建立推播通知事件" class="headerlink" title="建立推播通知事件"></a>建立推播通知事件</h2><p>首先先讓我們建立一個推播通知事件，所有的推播都會透過此事件推送到 Redis：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ php artisan make:event PushNotification</div></pre></td></tr></table></figure>
<p>程式碼如下：</p>
<figure class="highlight php"><figcaption><span>app/Events/PushNotification.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Events</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Events</span>\<span class="title">Event</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Broadcasting</span>\<span class="title">ShouldBroadcast</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PushNotification</span> <span class="keyword">extends</span> <span class="title">Event</span> <span class="keyword">implements</span> <span class="title">ShouldBroadcast</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">SerializesModels</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@var</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> $token;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@var</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> $message;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a new event instance.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> User $user</div><div class="line">     * <span class="doctag">@param</span>      $message</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user, $message)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;token = sha1($user-&gt;id . <span class="string">'|'</span> . $user-&gt;email);</div><div class="line">        <span class="keyword">$this</span>-&gt;message = $message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the channels the event should be broadcast on.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">broadcastOn</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="string">'notification'</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我們的事件會有兩個屬性，一個是要推播的 <code>message</code>，另一個比較特別的則是 <code>token</code>。<code>token</code> 會作為 socket.io 中 room 的名稱，代表一個使用者。也就是說一個使用者只會有一個 room（<code>token</code>），這麼做可以讓我們指定要推播給哪個使用者。</p>
<p><code>broadcastOn</code> 則是設定在 Redis 中的頻道名稱，我們會在 socket.io server 端透過這個名稱來訂閱由此事件傳遞的資訊。</p>
<p>若不太明白可以先接著往下看，會有更詳細的說明。</p>
<div class="tip"><br><code>token</code> 的雜湊方式可以隨你喜歡更改，但要確定每次雜湊出來的值都相同，因為我們在 render view 給使用者的時候也會雜湊一組 token 給前端的 JavaScript，以加入 socket.io 中特定的 room。<br></div>

<h2 id="建立-Socket-io-Server"><a href="#建立-Socket-io-Server" class="headerlink" title="建立 Socket.io Server"></a>建立 Socket.io Server</h2><p>我們的 socket.io 會有兩個任務：</p>
<ul>
<li>接收由 Laravel 的 PushNotification 事件送來的推播資訊</li>
<li>將內容透過 websocket 推播給使用者</li>
</ul>
<p>讓我們先使用 npm 安裝必要的套件：分別是 <code>express</code>（http server）、<code>socket.io</code>（websocket server）及 <code>ioredis</code>（訂閱 redis）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install express socket.io ioredis --save</div></pre></td></tr></table></figure>
<p>接著我們建立 <code>socket.js</code>，先寫 redis 部份的程式碼測試與 Laravel 廣播事件的串接是否有問題：</p>
<figure class="highlight js"><figcaption><span>socket.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Redis = <span class="built_in">require</span>(<span class="string">'ioredis'</span>);</div><div class="line"><span class="keyword">var</span> redis = <span class="keyword">new</span> Redis();</div><div class="line"></div><div class="line"><span class="comment">// 訂閱 redis 的 notification 頻道，也就是我們在事件中 broadcastOn 所設定的</span></div><div class="line">redis.subscribe(<span class="string">'notification'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, count</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'connect!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 當該頻道接收到訊息時就列在 terminal 上</span></div><div class="line">redis.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">channel, notification</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(notification);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="測試與-Laravel-是否正確串接"><a href="#測試與-Laravel-是否正確串接" class="headerlink" title="測試與 Laravel 是否正確串接"></a>測試與 Laravel 是否正確串接</h3><p>首先你必須先確認這些東西有沒有執行：</p>
<ul>
<li>Laravel Application（Nginx or <code>php artisan serve</code>）</li>
<li>Redis server</li>
<li>隊列監聽器（<code>php artisan queue:listen</code>）</li>
<li>socket.io server（<code>node socket.js</code>）</li>
</ul>
<p>確認完畢後，我們進入 Laravel 的 Tinker 做測試：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ php artisan tinker</div></pre></td></tr></table></figure>
<img src="/2015/12/22/push-notification-to-user-in-laravel-5/test-event.gif" alt="test-event.gif" title="">
<p>我們直接觸發事件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">event(<span class="keyword">new</span> App\Events\PushNotification(App\User::first(), <span class="string">'banana!'</span>))</div></pre></td></tr></table></figure>
<p>你應該在 node 的 terminal 看到：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"event"</span>:<span class="string">"App\\Events\\PushNotification"</span>,<span class="string">"data"</span>:&#123;<span class="string">"token"</span>:<span class="string">"long-hash-string"</span>,<span class="string">"message"</span>:<span class="string">"banana!"</span>&#125;&#125;</div></pre></td></tr></table></figure>
<h2 id="連接前端與-socket-io"><a href="#連接前端與-socket-io" class="headerlink" title="連接前端與 socket.io"></a>連接前端與 socket.io</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>首先我們必須先安裝 <code>socket.io-client</code>，這是 socket.io 在前端所使用的套件，我們會透過 server side 的開發方式，再透過 elixir 的 browserify 轉成前端可執行的 JavaScript。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install socket.io-client --save</div></pre></td></tr></table></figure>
<p>建立 <code>resources/assets/js/app.js</code>，撰寫以下程式碼：</p>
<figure class="highlight js"><figcaption><span>resources/assets/js/app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io-client'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建立 socket.io 的連線</span></div><div class="line"><span class="keyword">var</span> notification = io.connect(<span class="string">'http://localhost:3000'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 當從 socket.io server 收到 notification 時將訊息印在 console 上</span></div><div class="line">notification.on(<span class="string">'notification'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(message);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接著修改 <code>gulpfile.js</code>，然後執行 <code>gulp</code>，他會將編譯結果放在 <code>public/js/app.js</code>：</p>
<figure class="highlight js"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">elixir(<span class="function"><span class="keyword">function</span>(<span class="params">mix</span>) </span>&#123;</div><div class="line">    mix.browserify(<span class="string">'app.js'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接著我們希望在 <code>/home</code> 能接收推播（5.2 的 <code>make:auth</code> 預設提供 <code>/home</code> 作為登入後的首頁），所以先在 <code>resources/views/layouts/app.blade.php</code> 下方加上 <code>@yield(&#39;scripts&#39;)</code> ，看起來會像這樣：<br><figure class="highlight html"><figcaption><span>resources/views/layouts/app.blade.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"></div><div class="line">@yield('content')</div><div class="line"></div><div class="line">@yield('scripts')</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- JavaScripts --&gt;</span></div><div class="line">&#123;&#123;-- <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; elixir('js/app.js') &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> --&#125;&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>然後在 <code>resources/views/home.blade.php</code> 下面載入剛剛寫好的 JavaScript：</p>
<figure class="highlight html"><figcaption><span>resources/views/home.blade.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@section('content')</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">@endsection</div></pre></td></tr></table></figure>
<h3 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h3><p>修改剛剛的 <code>socket.js</code>，增加 socket.io 及推送通知至前端的程式碼：</p>
<figure class="highlight js"><figcaption><span>socket.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);</div><div class="line"><span class="keyword">var</span> Redis = <span class="built_in">require</span>(<span class="string">'ioredis'</span>);</div><div class="line"><span class="keyword">var</span> redis = <span class="keyword">new</span> Redis();</div><div class="line"></div><div class="line">redis.subscribe(<span class="string">'notification'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, count</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'connect!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">redis.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">channel, notification</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(notification);</div><div class="line">  notification = <span class="built_in">JSON</span>.parse(notification);</div><div class="line"></div><div class="line">  <span class="comment">// 將訊息推播給使用者</span></div><div class="line">  io.emit(<span class="string">'notification'</span>, notification.data.message);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 監聽 3000 port</span></div><div class="line">http.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening on Port 3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接著就可以測試前端是否可以收到通知了！</p>
<img src="/2015/12/22/push-notification-to-user-in-laravel-5/test-socket.gif" alt="test-socket.gif" title="">
<h2 id="區分使用者"><a href="#區分使用者" class="headerlink" title="區分使用者"></a>區分使用者</h2><p>如果你有開不同瀏覽器登入不同使用者的話會發現，不管你在事件的 <code>User</code> 傳入誰，每個使用者都會收到通知。</p>
<p>因為所有使用者都屬於同一個 channel（<code>notification</code>）。這時就要使用 <code>token</code> 及 socket.io 的 room 來區分使用者。每個 <code>token</code> 代表一個 room，也就是一個使用者，我們就可以由 Laravel 廣播事件內的 token 決定要接推播通知傳給哪個使用者：</p>
<img src="/2015/12/22/push-notification-to-user-in-laravel-5/02.png" alt="02.png" title="">
<h3 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h3><p>我們要做的事情有：</p>
<ul>
<li>在 Controller 產生 <code>token</code>（與事件中的相同），並傳遞至 View</li>
<li>前端的 JavaScript 取得 <code>token</code>，並傳給 socket.io server 加入指定的 room</li>
</ul>
<p>首先，先修改 <code>HomeControllr@index</code></p>
<figure class="highlight php"><figcaption><span>app/Http/Controllers/HomeControllr.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Show the application dashboard.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> Response</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    $user = $request-&gt;user();</div><div class="line">    $token = sha1($user-&gt;id . <span class="string">'|'</span> . $user-&gt;email);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> view(<span class="string">'home'</span>, compact(<span class="string">'token'</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接著修改剛剛新增在 <code>resources/views/home.blade.php</code> 的部分，將 <code>token</code> 傳至 JavaScript 中：</p>
<figure class="highlight html"><figcaption><span>resources/views/home.blade.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">@section('content')</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    Notification.TOKEN = <span class="string">'&#123;&#123; $token or null &#125;&#125;'</span>;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">@endsection</div></pre></td></tr></table></figure>
<p>修改 <code>resources/assets/js/app.js</code>，使用 <code>token</code> 加入使用者的 room：</p>
<figure class="highlight js"><figcaption><span>resources/assets/js/app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io-client'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> notification = io.connect(<span class="string">'http://localhost:3000'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 當連接到 socket.io server 時觸發 set-token 設定使用者的 room</span></div><div class="line">notification.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  notification.emit(<span class="string">'set-token'</span>, Notification.TOKEN);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">notification.on(<span class="string">'notification'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(message);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="後端-1"><a href="#後端-1" class="headerlink" title="後端"></a>後端</h3><p>修改 <code>socket.js</code>，讓使用者加入屬於他的 room，並由 Laravel 廣播事件資訊內的 token 決定要傳給哪個使用者（room）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);</div><div class="line"><span class="keyword">var</span> Redis = <span class="built_in">require</span>(<span class="string">'ioredis'</span>);</div><div class="line"><span class="keyword">var</span> redis = <span class="keyword">new</span> Redis();</div><div class="line"></div><div class="line">redis.subscribe(<span class="string">'notification'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, count</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'connect!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="comment">// 當使用者觸發 set-token 時將他加入屬於他的 room</span></div><div class="line">  socket.on(<span class="string">'set-token'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">token</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(token);</div><div class="line">    socket.join(<span class="string">'token:'</span> + token);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">redis.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">channel, notification</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(notification);</div><div class="line">  notification = <span class="built_in">JSON</span>.parse(notification);</div><div class="line"></div><div class="line">  <span class="comment">// 使用 to() 指定傳送的 room，也就是傳遞給指定的使用者</span></div><div class="line">  io.to(<span class="string">'token:'</span> + notification.data.token).emit(<span class="string">'notification'</span>, notification.data.message);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 監聽 3000 port</span></div><div class="line">http.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening on Port 3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><img src="/2015/12/22/push-notification-to-user-in-laravel-5/demo.gif" alt="demo.gif" title="">
<p>基本上前端收的到通知之後，如何呈現就不是困難的問題了。</p>
<p><a href="https://github.com/jigsawye/laravel-push-notification-demo" target="_blank" rel="external">本文的原始碼</a></p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>實作其實沒那麼困難，不過如果真的要上 Production 的話還是得再思考一下！因為感覺這個 Solution 沒有很透徹XD！</p>
<p>像是 token 的部分這樣安全性不知道會不會不佳，如果想更安全可以用更複雜的演算法，或是在 Laravel 跟 socket.io server 用相同的加密演算法，互相加解密也可以。作法應該還很多種，有厲害的大大還麻煩幫忙補充XD</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在逛 &lt;a href=&quot;https://phphub.org&quot;&gt;PHPHub&lt;/a&gt; 時剛好看到&lt;a href=&quot;https://phphub.org/topics/1585&quot;&gt;這篇&lt;/a&gt;，想著之前也想做類似 Facebook 的通知服務，剛好之前也有碰過一陣子的 socket.io，所以就試著實做看看了。不過推播通知在手機上是相當常見的，但在 Web 上不知為何卻相當少見，也可能是我見識太淺了，看過的網站太少XD。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jigsawye/laravel-push-notification-demo&quot;&gt;本文的原始碼&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tutorial" scheme="http://jigsawye.com/categories/tutorial/"/>
    
    
      <category term="javascript" scheme="http://jigsawye.com/tags/javascript/"/>
    
      <category term="php" scheme="http://jigsawye.com/tags/php/"/>
    
      <category term="laravel" scheme="http://jigsawye.com/tags/laravel/"/>
    
      <category term="laravel5" scheme="http://jigsawye.com/tags/laravel5/"/>
    
      <category term="notification" scheme="http://jigsawye.com/tags/notification/"/>
    
      <category term="socket-io" scheme="http://jigsawye.com/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>在 OSX 的終端機正常瀏覽 PTT</title>
    <link href="http://jigsawye.com/2015/12/06/ptt-in-osx-terminal/"/>
    <id>http://jigsawye.com/2015/12/06/ptt-in-osx-terminal/</id>
    <published>2015-12-06T12:21:51.000Z</published>
    <updated>2016-01-18T11:58:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 OSX 的終端機連線至 PTT，會因為編碼問題而產生亂碼。</p>
<a id="more"></a>
<img src="/2015/12/06/ptt-in-osx-terminal/01.png" alt="01.png" title="">
<h2 id="使用-SSH-連線"><a href="#使用-SSH-連線" class="headerlink" title="使用 SSH 連線"></a>使用 SSH 連線</h2><p>其實我們只要改用 SSH 連線至 PTT 就可以解決這個問題了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh bbsu@ptt.cc</div></pre></td></tr></table></figure></p>
<img src="/2015/12/06/ptt-in-osx-terminal/02.png" alt="02.png" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 OSX 的終端機連線至 PTT，會因為編碼問題而產生亂碼。&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://jigsawye.com/categories/note/"/>
    
    
      <category term="terminal" scheme="http://jigsawye.com/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>防止 SSH 因長時間未動作而斷線</title>
    <link href="http://jigsawye.com/2015/12/06/prevent-ssh-disconnect/"/>
    <id>http://jigsawye.com/2015/12/06/prevent-ssh-disconnect/</id>
    <published>2015-12-06T12:11:11.000Z</published>
    <updated>2015-12-06T12:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 SSH 連線到遠端主機時，常常因為一段時間未動作而逾時斷線。要避免這樣的情形發生，<br>只要設定自己的 SSH 設定即可。</p>
<a id="more"></a>
<h2 id="編輯-SSH-設定檔"><a href="#編輯-SSH-設定檔" class="headerlink" title="編輯 SSH 設定檔"></a>編輯 SSH 設定檔</h2><p>打開 <code>~/.ssh/config</code> 檔案（如果沒有就建一個），加入以下：</p>
<figure class="highlight bash"><figcaption><span>~/.ssh/config</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">host *</div><div class="line">    ServerAliveInterval 60</div><div class="line">    <span class="comment"># 每 60 秒傳送一次封包</span></div></pre></td></tr></table></figure>
<p>這麼做就會每 60 秒發送一次封包到遠端主機以保持連線。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 SSH 連線到遠端主機時，常常因為一段時間未動作而逾時斷線。要避免這樣的情形發生，&lt;br&gt;只要設定自己的 SSH 設定即可。&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://jigsawye.com/categories/note/"/>
    
    
      <category term="terminal" scheme="http://jigsawye.com/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>在 iDevice 上執行 React Native（不需付費）</title>
    <link href="http://jigsawye.com/2015/11/30/running-react-native-on-device/"/>
    <id>http://jigsawye.com/2015/11/30/running-react-native-on-device/</id>
    <published>2015-11-30T15:16:22.000Z</published>
    <updated>2016-02-04T06:06:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在練著寫 React Native 時詢問過開發 iOS 的朋友，能不能將 App 燒至自己的裝置上。當時好像因為 Apple 規範的關係，必須加入 <a href="https://developer.apple.com/programs/" target="_blank" rel="external">Developer Program</a> 並 <strong>年付 $99</strong> 取得憑證才行。而因為我沒有打算上架到 App Store 上所以只好放棄付錢作罷。</p>
<p>最近剛好想寫一些自己的工具，又試著上網找了一下資料，發現在 XCode 7 之後已經開放未付費也可以燒至裝置上了，因此紀錄一下。</p>
<a id="more"></a>
<!-- toc -->
<h2 id="加入-Apple-ID-至-XCode"><a href="#加入-Apple-ID-至-XCode" class="headerlink" title="加入 Apple ID 至 XCode"></a>加入 Apple ID 至 XCode</h2><p>將 iDevice 透過 USB 連接，並在 XCode 選擇你的裝置：</p>
<img src="/2015/11/30/running-react-native-on-device/01.png" alt="01.png" title="">
<p>按工具列的執行或 cmd + R 執行，接著會跳出錯誤告知你需要有效的憑證，這邊我們點 <strong>Fix issue</strong>：</p>
<img src="/2015/11/30/running-react-native-on-device/02.png" alt="02.png" title="">
<p>如果你沒有 Apple ID 或是還沒加入 Developer Program，就選左邊的 <strong>Join a Program</strong>，如果你已經有了，就選擇 <strong>Add</strong> 並填入你的 Apple ID：</p>
<img src="/2015/11/30/running-react-native-on-device/03.png" alt="03.png" title="">
<p>接著你就可以看到帳號已經加入完成：</p>
<img src="/2015/11/30/running-react-native-on-device/04.png" alt="04.png" title="">
<h2 id="將-App-Build-至-iDevice-上"><a href="#將-App-Build-至-iDevice-上" class="headerlink" title="將 App Build 至 iDevice 上"></a>將 App Build 至 iDevice 上</h2><p>接著我們在 Build 一次，又跳出了一個錯誤，得知是安全性的問題：</p>
<img src="/2015/11/30/running-react-native-on-device/05.png" alt="05.png" title="">
<p>打開你的裝置，依序選擇 <strong>設定</strong>-&gt;<strong>一般</strong>-&gt;<strong>描述檔</strong>-&gt;<code>你的 Apple ID</code>-&gt;<strong>信任「<code>你的 Apple ID</code>」</strong>：</p>
<img src="/2015/11/30/running-react-native-on-device/06.png" alt="06.png" title="">
<h2 id="執行你的-App"><a href="#執行你的-App" class="headerlink" title="執行你的 App"></a>執行你的 App</h2><p>完成後就可以執行你的 App 了，然後又出現了錯誤，因為路徑是 localhost，所以讀不到 bundle 檔案：</p>
<img src="/2015/11/30/running-react-native-on-device/07.png" alt="07.png" title="">
<p>打開 XCode，在你的 Project 裡找到 <code>AppDelgate.m</code> 檔案，將 <code>jsCodeLocation</code> 中的 <code>localhost</code> 修改成你的 IP：</p>
<img src="/2015/11/30/running-react-native-on-device/08.png" alt="08.png" title="">
<h2 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h2><p>完成！別忘了搖晃裝置可以叫出 dev menu，記得打開 Live Reload 讓開發更方便！</p>
<img src="/2015/11/30/running-react-native-on-device/09.png" alt="09.png" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在練著寫 React Native 時詢問過開發 iOS 的朋友，能不能將 App 燒至自己的裝置上。當時好像因為 Apple 規範的關係，必須加入 &lt;a href=&quot;https://developer.apple.com/programs/&quot;&gt;Developer Program&lt;/a&gt; 並 &lt;strong&gt;年付 $99&lt;/strong&gt; 取得憑證才行。而因為我沒有打算上架到 App Store 上所以只好放棄付錢作罷。&lt;/p&gt;
&lt;p&gt;最近剛好想寫一些自己的工具，又試著上網找了一下資料，發現在 XCode 7 之後已經開放未付費也可以燒至裝置上了，因此紀錄一下。&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://jigsawye.com/categories/note/"/>
    
    
      <category term="react" scheme="http://jigsawye.com/tags/react/"/>
    
      <category term="react-native" scheme="http://jigsawye.com/tags/react-native/"/>
    
      <category term="xcode" scheme="http://jigsawye.com/tags/xcode/"/>
    
      <category term="ios" scheme="http://jigsawye.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Redux 起手式：Actions、Reducers 及 Store</title>
    <link href="http://jigsawye.com/2015/11/29/instruction-with-redux/"/>
    <id>http://jigsawye.com/2015/11/29/instruction-with-redux/</id>
    <published>2015-11-29T03:23:33.000Z</published>
    <updated>2015-11-30T18:05:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>真正開始寫 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 大概是這一兩個月的時間吧，印象中前幾個月正火紅的時候，觀望著開發架構，從 Facebook 剛開始的 <a href="https://github.com/facebook/flux" target="_blank" rel="external">Flux</a>，一路看到 <a href="https://github.com/BinaryMuse/fluxxor" target="_blank" rel="external">fluxxor</a>、<a href="https://github.com/goatslacker/alt" target="_blank" rel="external">alt</a> 這些 Library 等等，真的是多到爆，然後那個 Flux 的概念圖看了不下 N 次，但還是不得其門而入。</p>
<p>直到不久前出現了一個叫 <a href="github.com/rackt/redux">Redux</a> 的東西，剛好有新 project 要用 React 寫，看著各方大神推薦就順勢跳進 Redux 的世界了。最近也利用 Redux 寫了個 <a href="https://github.com/jigsawye/node-proxy-manager-client" target="_blank" rel="external">Proxy manager</a>，趁最近期中考完，回頭寫一下 Redux 的核心概念。</p>
<a id="more"></a>
<!-- toc -->
<h2 id="那些在-React-遇到的麻煩事"><a href="#那些在-React-遇到的麻煩事" class="headerlink" title="那些在 React 遇到的麻煩事"></a>那些在 React 遇到的麻煩事</h2><p>你會有個 Root Component，然後它負責：</p>
<ul>
<li>有一株肥美的 state tree（狀態樹）管理下層元件的資料</li>
<li>有一坨負責處理資料的 function 透過 props 傳遞給下層元件呼叫，以改變上面那棵樹</li>
</ul>
<p>所以呢，Facebook 就建議了一種 Flux 架構，把那些 function 及 state tree 給抽出來集中管理。</p>
<h2 id="為什麼選-Redux"><a href="#為什麼選-Redux" class="headerlink" title="為什麼選 Redux"></a>為什麼選 Redux</h2><p>以我來說有這幾個原因：</p>
<ul>
<li>概念很簡單，只要清楚 Actions 及 Reducer 就可以開始實做了</li>
<li>API 很少，而且只是幾個單純的 function，還有很方便的 Middleware 可以用</li>
<li>有完善的 devtools，可回溯的 state</li>
<li>社群資源多，而且我觀察台灣大多數 React 開發者都選用 Redux</li>
<li>官方文件有中文版（<a href="http://chentsulin.github.io/redux/" target="_blank" rel="external">由此去</a>），而且有完整的 step by step example</li>
</ul>
<h2 id="所以那個流程"><a href="#所以那個流程" class="headerlink" title="所以那個流程"></a>所以那個流程</h2><p>我以很常見的 counter（計數器）為例，假設我要將目前的數字 + 1：</p>
<ul>
<li>dispatch（發送）一個 increment（+ 1）的 Action（動作）</li>
<li>管理 counter 的 reducer 接收到 action 後將 state 中目前的數字 + 1</li>
<li>state tree 及 reducers 由 store 集中管理，並由 React 取用</li>
</ul>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>就以剛剛的 Todo 為例，actions 基本上就只是一個 JavaScript 物件，只需要定義好這個 action 的 type（類型）即可，當這個 action 被 dispatch 時，這個物件就會被傳至 reudcer，所以若有資料需要傳入，只需要加在這個 action 物件中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'INCREMENT'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一般來說會向下方這樣把 type 定義成常數做取用，不過這邊就盡量精簡化了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span>;</div></pre></td></tr></table></figure></p>
<h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><p>reducer 則是一個 function，負責接收被 dispatch 的 action 並處理 state，要注意的是需傳入兩個參數到這個 function，第一個是目前的 state，第二個則是我們定義的 action 物件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</div><div class="line">  <span class="comment">// 在這邊回傳處理好的 state</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是這麼簡單的 function，要注意的是，初始化的時候 state 是空的，所以在第一個參數放了預設的 state。<br>接著就是撰寫處理 state 的部分：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</div><div class="line">    <span class="keyword">return</span> state + <span class="number">1</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>還記得在 action 定義的 type 吧？我們會在 reducer 中根據 action 物件中的 type 去對應要執行的動作，接著回傳處理完的 state。</p>
<h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>我們現在知道了定義的 action 及處理 state 的 reducer，最後我們則需要透過 redux 的 <code>createStore</code> 將 reducer 轉換成 store：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="comment">// 如果透過瀏覽器的方式執行的話可以寫成下面這樣</span></div><div class="line"><span class="comment">// const &#123; createStore &#125; = Redux;</span></div><div class="line"></div><div class="line"><span class="comment">// 產生 store</span></div><div class="line"><span class="keyword">let</span> store = createStore(counter);</div></pre></td></tr></table></figure></p>
<p>對，就這麼一行，接著你就可以開始透過 action 操作 state 了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 透過 getState() 取得目前的 state</span></div><div class="line"><span class="built_in">console</span>.log(store.getState());</div><div class="line"></div><div class="line"><span class="comment">// 透過 dispatch() 發送我們剛剛所定義的 action</span></div><div class="line">store.dispatch(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'INCREMENT'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 看執行後的 state</span></div><div class="line"><span class="built_in">console</span>.log(store.getState());</div></pre></td></tr></table></figure></p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h2><p>想像一下，Redux 就是個超級狀態機，藉由我們定義的 action 去改變 state。而我們只用了 Redux 提供的 <code>createStore()</code> 產生 store，API 相當簡單。上面的程式我放在 <a href="http://jsbin.com/conezo/edit?js,console" target="_blank" rel="external">jsbin</a> 上，點右上角的 run 即可看執行的結果。搞懂基本概念後，接著可以去查看<a href="http://rackt.org/redux/docs/basics/Actions.html" target="_blank" rel="external">官方文件的 Todo Example</a>，或是 Redux 的 Creator <a href="https://github.com/gaearon" target="_blank" rel="external">Dan Abramov</a> 在 egghead 上的<a href="https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree?series=getting-started-with-redux" target="_blank" rel="external">影片教學</a>。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://rackt.org/redux/" target="_blank" rel="external">http://rackt.org/redux/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;真正開始寫 &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; 大概是這一兩個月的時間吧，印象中前幾個月正火紅的時候，觀望著開發架構，從 Facebook 剛開始的 &lt;a href=&quot;https://github.com/facebook/flux&quot;&gt;Flux&lt;/a&gt;，一路看到 &lt;a href=&quot;https://github.com/BinaryMuse/fluxxor&quot;&gt;fluxxor&lt;/a&gt;、&lt;a href=&quot;https://github.com/goatslacker/alt&quot;&gt;alt&lt;/a&gt; 這些 Library 等等，真的是多到爆，然後那個 Flux 的概念圖看了不下 N 次，但還是不得其門而入。&lt;/p&gt;
&lt;p&gt;直到不久前出現了一個叫 &lt;a href=&quot;github.com/rackt/redux&quot;&gt;Redux&lt;/a&gt; 的東西，剛好有新 project 要用 React 寫，看著各方大神推薦就順勢跳進 Redux 的世界了。最近也利用 Redux 寫了個 &lt;a href=&quot;https://github.com/jigsawye/node-proxy-manager-client&quot;&gt;Proxy manager&lt;/a&gt;，趁最近期中考完，回頭寫一下 Redux 的核心概念。&lt;/p&gt;
    
    </summary>
    
      <category term="tutorial" scheme="http://jigsawye.com/categories/tutorial/"/>
    
    
      <category term="react" scheme="http://jigsawye.com/tags/react/"/>
    
      <category term="javascript" scheme="http://jigsawye.com/tags/javascript/"/>
    
      <category term="redux" scheme="http://jigsawye.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>在 Sublime Text 的 JSX 中使用 Emmet</title>
    <link href="http://jigsawye.com/2015/11/23/enable-emmet-for-jsx-in-sublime/"/>
    <id>http://jigsawye.com/2015/11/23/enable-emmet-for-jsx-in-sublime/</id>
    <published>2015-11-23T07:45:20.000Z</published>
    <updated>2016-01-18T12:00:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sublime Text 除了有內建的標籤自動補齊，最有名的 pakcage 就是 <a href="http://emmet.io/" target="_blank" rel="external">Emmet</a> 了。Emmet 一直以來是寫 HTML 的神器，除了原本支援 HTML 外，其實已經支援了 JSX。但在 Sublime Text 的 JSX 中不額外設定的話是無法正常使用的，其實只要修改一下 Key Binding 就可以了。</p>
<a id="more"></a>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>如果你沒有安裝 Emmet，請先進行<a href="https://github.com/sergeche/emmet-sublime#how-to-install" target="_blank" rel="external">安裝</a>。</p>
<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>打開 <code>Sublime Text</code> -&gt; <code>Preferences</code> -&gt; <code>Key Bindings - User</code>，增加以下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"keys"</span>: [<span class="string">"tab"</span>], <span class="attr">"command"</span>: <span class="string">"expand_abbreviation_by_tab"</span>, <span class="attr">"context"</span>: [</div><div class="line">        &#123; <span class="attr">"operand"</span>: <span class="string">"source.js"</span>, <span class="attr">"operator"</span>: <span class="string">"equal"</span>, <span class="attr">"match_all"</span>: <span class="literal">true</span>, <span class="attr">"key"</span>: <span class="string">"selector"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"match_all"</span>: <span class="literal">true</span>, <span class="attr">"key"</span>: <span class="string">"selection_empty"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"operator"</span>: <span class="string">"equal"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span>, <span class="attr">"match_all"</span>: <span class="literal">true</span>, <span class="attr">"key"</span>: <span class="string">"has_next_field"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"operand"</span>: <span class="literal">false</span>, <span class="attr">"operator"</span>: <span class="string">"equal"</span>, <span class="attr">"match_all"</span>: <span class="literal">true</span>, <span class="attr">"key"</span>: <span class="string">"auto_complete_visible"</span> &#125;,</div><div class="line">        &#123; <span class="attr">"match_all"</span>: <span class="literal">true</span>, <span class="attr">"key"</span>: <span class="string">"is_abbreviation"</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>當然，在 JSX 中的 Emmet 也會自動使用 <code>className</code> 替代 <code>class</code>，<code>htmlFor</code> 替代 <code>for</code> ⋯⋯等等的 JSX 語法。</p>
<img src="/2015/11/23/enable-emmet-for-jsx-in-sublime/demo.gif" alt="demo.gif" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sublime Text 除了有內建的標籤自動補齊，最有名的 pakcage 就是 &lt;a href=&quot;http://emmet.io/&quot;&gt;Emmet&lt;/a&gt; 了。Emmet 一直以來是寫 HTML 的神器，除了原本支援 HTML 外，其實已經支援了 JSX。但在 Sublime Text 的 JSX 中不額外設定的話是無法正常使用的，其實只要修改一下 Key Binding 就可以了。&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://jigsawye.com/categories/note/"/>
    
    
      <category term="react" scheme="http://jigsawye.com/tags/react/"/>
    
      <category term="jsx" scheme="http://jigsawye.com/tags/jsx/"/>
    
      <category term="sublime" scheme="http://jigsawye.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 上使用 Homebrew 安裝 Docker</title>
    <link href="http://jigsawye.com/2015/10/10/install-docker-on-mac-via-homebrew/"/>
    <id>http://jigsawye.com/2015/10/10/install-docker-on-mac-via-homebrew/</id>
    <published>2015-10-09T18:01:40.000Z</published>
    <updated>2015-11-30T18:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文建議了解 unix-like 基礎指令及 Docker 基本操作者閱讀。</p>
</blockquote>
<p>雖然 Docker 官方推薦使用 <a href="https://www.docker.com/toolbox" target="_blank" rel="external">Docker Toolbox</a>，不過我個人很不喜歡這種一鍵安裝包，連啟動還要用 GUI。可是動手搜尋 <code>docker via homebrew</code> 之類的關鍵字，出來的結果都是使用舊的 <code>boot2docker</code>（目前為 <code>docker-machine</code>），所以找不到只好自己做個紀錄了。</p>
<a id="more"></a>
<!-- toc -->
<h2 id="安裝及設定"><a href="#安裝及設定" class="headerlink" title="安裝及設定"></a>安裝及設定</h2><h3 id="安裝-docker-及-docker-machine"><a href="#安裝-docker-及-docker-machine" class="headerlink" title="安裝 docker 及 docker-machine"></a>安裝 docker 及 docker-machine</h3><p>首先更新 <code>homebrew</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">❯ brew update</div></pre></td></tr></table></figure></p>
<p>接著先安裝 <code>docker</code> 及 <code>docker-machine</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">❯ brew install docker docker-machine</div></pre></td></tr></table></figure></p>
<h3 id="啟動-docker-machine"><a href="#啟動-docker-machine" class="headerlink" title="啟動 docker-machine"></a>啟動 docker-machine</h3><p>我們要透過 <code>docker-machine</code> 建立並啟動一個 VM 作為 docker 的環境，這邊我使用的 driver 為 VirtualBox，名字設定為 default：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">❯ docker-machine create --driver virtualbox default</div></pre></td></tr></table></figure></p>
<p>接下來為重點，我們執行 <code>docker-machine env default</code>，可以查看 <code>default</code> 所設定的參數，而這些參數用於指定 <code>docker</code> 的 client 所要連線的參數：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">❯ docker-machine env default</div><div class="line"><span class="built_in">export</span> DOCKER_TLS_VERIFY=<span class="string">"1"</span></div><div class="line"><span class="built_in">export</span> DOCKER_HOST=<span class="string">"tcp://192.168.99.100:2376"</span></div><div class="line"><span class="built_in">export</span> DOCKER_CERT_PATH=<span class="string">"/Users/jigsawye/.docker/machine/machines/default"</span></div><div class="line"><span class="built_in">export</span> DOCKER_MACHINE_NAME=<span class="string">"default"</span></div><div class="line"><span class="comment"># Run this command to configure your shell:</span></div><div class="line"><span class="comment"># eval "$(docker-machine env default)"</span></div></pre></td></tr></table></figure></p>
<p>在最後一行有提示 <code>Run this command to configure your shell</code>，所以我們直接在 terminal 執行，用於參數設定至 shell 中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">❯ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env default)</span>"</span></div></pre></td></tr></table></figure>
<p>不過這樣的話每次開新的 terminal 都要執行一次，所以你可以把這行指令新增到你的 <code>~/.bashrc</code>（or <code>~/.zshrc</code> etc）：<br><figure class="highlight bash"><figcaption><span>.zshrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment"># configure the shell</span></div><div class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env default)</span>"</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy!"></a>Enjoy!</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">❯ docker images</div><div class="line">REPOSITORY        TAG        IMAGE ID        CREATED        VIRTUAL SIZE</div></pre></td></tr></table></figure>
<h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><p>如果沒執行 <code>eval &quot;$(docker-machine env default)&quot;</code> 設定 <code>docker</code> clinet 需要的參數，在執行指令時會顯示錯誤：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">❯ docker images</div><div class="line">Get http://%2Fvar%2Frun%2Fdocker.sock/v1.20/containers/json: dial unix /var/run/docker.sock: connect: no such file or directory.</div><div class="line">* Are you trying to connect to a TLS-enabled daemon without TLS?</div><div class="line">* Is your docker daemon up and running?</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><a href="https://docs.docker.com/installation/mac/#from-your-shell" target="_blank" rel="external">Reference</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文建議了解 unix-like 基礎指令及 Docker 基本操作者閱讀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;雖然 Docker 官方推薦使用 &lt;a href=&quot;https://www.docker.com/toolbox&quot;&gt;Docker Toolbox&lt;/a&gt;，不過我個人很不喜歡這種一鍵安裝包，連啟動還要用 GUI。可是動手搜尋 &lt;code&gt;docker via homebrew&lt;/code&gt; 之類的關鍵字，出來的結果都是使用舊的 &lt;code&gt;boot2docker&lt;/code&gt;（目前為 &lt;code&gt;docker-machine&lt;/code&gt;），所以找不到只好自己做個紀錄了。&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://jigsawye.com/categories/note/"/>
    
    
      <category term="docker" scheme="http://jigsawye.com/tags/docker/"/>
    
      <category term="terminal" scheme="http://jigsawye.com/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>JSDC 2015 會後筆記（Day 2）</title>
    <link href="http://jigsawye.com/2015/10/07/jsdc-2015-day-2/"/>
    <id>http://jigsawye.com/2015/10/07/jsdc-2015-day-2/</id>
    <published>2015-10-07T03:23:00.000Z</published>
    <updated>2016-01-18T12:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文延續 <a href="/2015/10/05/jsdc-2015-day-1/">Day 1</a></p>
</blockquote>
<p>第一天結束之後，晚上我去淡水我朋友借住一天。淡水跟南港展覽館格有夠遠…來回要一個小時多，所以二天早上八點出發，到會場已經九點半了，導致我第一個 topic 完全沒聽到，虧大了！</p>
<a id="more"></a>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><h3 id="Tooling-with-Three-js"><a href="#Tooling-with-Three-js" class="headerlink" title="Tooling with Three.js"></a>Tooling with Three.js</h3><p>如上文，這個 topic 我完全沒聽到…。不過看了一下簡報，<code>Three.js</code> 是用來做 WebGL 的 JavaScript Library，可以用來做 Web 的 Game、Animation…等等，本身也有很多的開發工具可以用，在 Github 上也有 20000+ 的 Star，是相當成熟的 Library，未來有機會也許會試著接觸看看！</p>
<h3 id="Build-Anything-with-JavaScript"><a href="#Build-Anything-with-JavaScript" class="headerlink" title="Build Anything with JavaScript"></a>Build Anything with JavaScript</h3><p>講者主要介紹 Arduino 及相關的 IoT 設備，最後則講到他們開發的 Webduino。可能是因為前一天看過超 OP 的自幹 CNC 機器，所以在這場相對的沒有那麼讓我感到特別。基本上 Webduino 就是讓 Arduino 可以透過 HTML + JavaScript 的方式做開發，讓前端工程師也能享受操縱 IoT 的快感！不過比較可惜的是，因為當天網路環境相當惡劣，所以有些東西沒有 Demo，滿可惜的。</p>
<h3 id="React-Native-實戰-融入現有-iOS-App"><a href="#React-Native-實戰-融入現有-iOS-App" class="headerlink" title="React Native 實戰! 融入現有 iOS App"></a>React Native 實戰! 融入現有 iOS App</h3><p>使用 React Native 可以開發 native 的 app，但也可以結合至原有的 native app！講者先說明 React Native 的運作原理後，在講述自己將 React Native 整合至原本 native app 中。</p>
<p>React Native 運作原理：<br><img src="/2015/10/07/jsdc-2015-day-2/01.png" alt="01.png" title=""></p>
<p>Demo 的時候講者在修改程式碼時，iOS app 也會跟著 live reloading，相當厲害！而且同樣的程式碼也能同時應用在 Android app！不過講者有提到，如果要銜接原生 app 的功能的話，必須會寫 Objective-C / Java 的原生 app，所以講者一直提到他叫原廠幫他修改原生的地方XD。</p>
<p>個人覺得 React 開始在侵略整個世界了，等到未來趨近於穩定的時候，一定會有更多人投入這部分的開發，畢竟 React 的初衷就是：</p>
<blockquote>
<p>Learn once, write anywhere.</p>
</blockquote>
<p>會了 React，可以同時開發 Web 及 App，何樂而不為呢XD</p>
<h3 id="Workshop-on-Control-Flow-w-ES2015-and-beyond"><a href="#Workshop-on-Control-Flow-w-ES2015-and-beyond" class="headerlink" title="Workshop on Control Flow w/ ES2015 and beyond."></a>Workshop on Control Flow w/ ES2015 and beyond.</h3><p>講者是 <a href="https://github.com/koajs/koa" target="_blank" rel="external">koa.js</a> 及 <a href="https://github.com/tj/co" target="_blank" rel="external">co</a> 的作者 <a href="https://github.com/jonathanong" target="_blank" rel="external">Jonathon</a>，講題是在說 ES2015 的控制流程，主要都是在講 JavaScript 的非同步機制及解決方法。講者很細心整理了在開發 node.js 時常遇到的一些問題，跟對應的解決方案，最讓我感興趣的就是 ES2016 的 <code>async</code> 及 <code>await</code>，但是現在好像沒有很完整的實作。在簡報結束後時間好像剩我滿多的，所以都變成 Q&amp;A 的時間，會眾問了不少問題，然後從講者身上挖到不少經驗及常用的工具或套件XD，我覺得最好笑的就是有個會眾問：</p>
<blockquote><p>Q:「Do you have any good way to determine a callback function is a asynchronous callback?」</p>
<p>「No. It sucks!」</p>
<footer><strong>Jonathon</strong><cite>JSDC 2015</cite></footer></blockquote>
<h3 id="Building-Hybrid-Mobile-Apps-with-Ionic-Framework-and-AngularJS"><a href="#Building-Hybrid-Mobile-Apps-with-Ionic-Framework-and-AngularJS" class="headerlink" title="Building Hybrid Mobile Apps with Ionic Framework and AngularJS"></a>Building Hybrid Mobile Apps with Ionic Framework and AngularJS</h3><p>其實這場只是因為想聽下場的講題，怕去 R2 回來就沒位置了，所以都在做自己的事XD。以前我寫過 AngularJS 一陣子，後來發現 React 後就轉投入 React 的懷抱了。其實在 React Native 或 NativeScript 等等，用於產生 native app 的作法前，使用 AngularJS 這種框架來建立 Hybrid app 是其中一種使用非原生語言開發 app 主流，使用 codova（PhoneGap）或是 ionic 來建立。</p>
<p>但是這種作法一直令人詬病的就是效能問題，因為基底就是 Web，而行動裝置的效能本身就不如一般的電腦，所以在使用上的 UX 相當的不好。但是講者有提到目前的行動裝置效能日漸提升，或許未來也會有 Hybrid app 的一片天呢。</p>
<h3 id="React-Test-and-Material-Design-Lite-React？"><a href="#React-Test-and-Material-Design-Lite-React？" class="headerlink" title="React Test and Material Design Lite + React？"></a>React Test and Material Design Lite + React？</h3><p>講者 xpsteven 之前在 React.tw 發佈他們的 mdl-react 的時候我就關注他了XD，感覺是個思維相當新的人。在這個 topic 他分享了測試的辛酸史，前前後後失敗了四次之有，跟國父革命有得拼！講者的結論就是直接做 UI 的 E2E test 就好，還有能花「錢」解決就花下去，效益比較好，接著最後就做了 live demo。</p>
<p>其實我一直在 Unit test 跟 E2E test 間做比較，我個人認為 Unit test 是首要完成的測試，因為 E2E test 是在測試的頂層，一般來說會比 Unit test 難處理，不過講者的結論也讓我想想是不是有這麼一回事，或許 E2E 才是會好解決的測試方案呢XD。</p>
<p><img src="http://2.bp.blogspot.com/-X__Rsznxdg4/TzPVWfte5ZI/AAAAAAAAAD0/Y1dWLNEW4zI/s1600/img1.jpg" alt=""></p>
<p>最後獻上講者的上班攻防經驗：<br><blockquote><p>寫測試是一種防禦，避免同事做的蠢事害自己加班。<br>提交 Bug Issue 是一種攻擊，讓同事加班 LOL。</p>
<footer><strong>Xpsteven</strong><cite>JSDC 2015</cite></footer></blockquote></p>
<h2 id="Lighting-Talk"><a href="#Lighting-Talk" class="headerlink" title="Lighting Talk"></a>Lighting Talk</h2><p>印象最深刻的就是<a href="https://chrome.google.com/webstore/detail/%E9%84%89%E6%B0%91%E6%9F%A5%E6%B0%B4%E8%A1%A8/kdcgipkhkbeipbooplfcdgclhecfngfi?hl=zh-TW" target="_blank" rel="external">鄉民查水表</a>跟 <a href="http://mrt.express/" target="_blank" rel="external">MRT Express</a>，後者還說他達成了大台北捷運1XX站抵達的成就XD。</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>今年要參加的時候發現票價真的不是我這學生負擔得起的，不過還好 JSDC 有提供<a href="http://jsdc-tw.kktix.cc/events/jsdc2015s" target="_blank" rel="external">學生獎勵計畫</a>，運氣很好也拿到資格。這也是我今年參加的第二個 Conference，上一次則是 COSCUP。參加這種 Conference 好處就是可以聽到很多技術的新知，也有在業界的開發經驗。以學生的角度真的可以學到不少未來工作的技能，而且我本身也很喜歡接觸新技術，所以即使很累我也覺得很值得啊！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文延續 &lt;a href=&quot;/2015/10/05/jsdc-2015-day-1/&quot;&gt;Day 1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一天結束之後，晚上我去淡水我朋友借住一天。淡水跟南港展覽館格有夠遠…來回要一個小時多，所以二天早上八點出發，到會場已經九點半了，導致我第一個 topic 完全沒聽到，虧大了！&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://jigsawye.com/categories/life/"/>
    
    
      <category term="jsdc-2015" scheme="http://jigsawye.com/tags/jsdc-2015/"/>
    
      <category term="jsdc" scheme="http://jigsawye.com/tags/jsdc/"/>
    
      <category term="conference" scheme="http://jigsawye.com/tags/conference/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的 Object.assign 陷阱</title>
    <link href="http://jigsawye.com/2015/10/06/javascript-object-assign/"/>
    <id>http://jigsawye.com/2015/10/06/javascript-object-assign/</id>
    <published>2015-10-06T10:05:14.000Z</published>
    <updated>2015-10-06T10:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以下開發情境為 ES2015（ES6）</p>
</blockquote>
<p>一般在寫 React 的時候，通常會希望資料是 immutable（不可變的），讓開發時對資料的流向即處理更容易，所以通常會使用 <code>Object.assign</code> 來複制 object。但今天在寫時遇到一個問題，我一直以為 <code>Object.assign</code> 會連同子項目都複製，結果兩個不同的資料改 A 竟然連 B 都跟著動，就做個紀錄。</p>
<a id="more"></a>
<p>假設我們有個 object，接著透過 <code>Object.assign</code> 複製兩個 object：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> test = &#123;</div><div class="line">  <span class="attr">childrenKey</span>: <span class="string">'value'</span>,</div><div class="line">  <span class="attr">childrenObject</span>: &#123;</div><div class="line">    <span class="attr">keyA</span>: <span class="string">'value a'</span>,</div><div class="line">    <span class="attr">keyB</span>: <span class="string">'value b'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> cloneA = <span class="built_in">Object</span>.assign(&#123;&#125;, test);</div><div class="line"><span class="keyword">const</span> cloneB = <span class="built_in">Object</span>.assign(&#123;&#125;, test);</div></pre></td></tr></table></figure></p>
<p>改變 <code>cloneA</code> 中 <code>childrenKey</code> 的 value，<code>cloneB</code> 中 <code>childrenKey</code> 的 value 並不會被改變：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">cloneA.childrenKey = <span class="string">'change value'</span>;</div><div class="line"></div><div class="line"><span class="comment">// cloneA</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">childrenKey</span>: <span class="string">'change value'</span>,</div><div class="line">  <span class="attr">childrenObject</span>: &#123;</div><div class="line">    <span class="attr">keyA</span>: <span class="string">'value a'</span>,</div><div class="line">    <span class="attr">keyB</span>: <span class="string">'value b'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// cloneB</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">childrenKey</span>: <span class="string">'value'</span>,</div><div class="line">  <span class="attr">childrenObject</span>: &#123;</div><div class="line">    <span class="attr">keyA</span>: <span class="string">'value a'</span>,</div><div class="line">    <span class="attr">keyB</span>: <span class="string">'value b'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可是當改變 <code>childrenObject</code> 的值時，卻會連動改變：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">cloneA.childrenObject.keyA = <span class="string">'change value a'</span>;</div><div class="line"></div><div class="line"><span class="comment">// cloneA</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">childrenKey</span>: <span class="string">'change value'</span>,</div><div class="line">  <span class="attr">childrenObject</span>: &#123;</div><div class="line">    <span class="attr">keyA</span>: <span class="string">'change value a'</span>,</div><div class="line">    <span class="attr">keyB</span>: <span class="string">'value b'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// cloneB</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">childrenKey</span>: <span class="string">'value'</span>,</div><div class="line">  <span class="attr">childrenObject</span>: &#123;</div><div class="line">    <span class="attr">keyA</span>: <span class="string">'change value a'</span>,</div><div class="line">    <span class="attr">keyB</span>: <span class="string">'value b'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原因是 <code>Object.assign</code> 只會對 object 的子項目做 clone，下一層的則會建立 reference，所以指向的 <code>childrenObject</code> 會是同一個。<br>要解決這個問題的話可以使用 <code>lodash</code> 的 <code>clonedeep</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cloneDeep = <span class="keyword">from</span> <span class="string">'lodash.clonedeep'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> test = &#123;</div><div class="line">  <span class="attr">childrenKey</span>: <span class="string">'value'</span>,</div><div class="line">  <span class="attr">childrenObject</span>: &#123;</div><div class="line">    <span class="attr">keyA</span>: <span class="string">'value a'</span>,</div><div class="line">    <span class="attr">keyB</span>: <span class="string">'value b'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> cloneA = cloneDeep(test);</div><div class="line"><span class="keyword">const</span> cloneB = cloneDeep(test);</div></pre></td></tr></table></figure>
<p>或是使用 <a href="https://facebook.github.io/immutable-js/" target="_blank" rel="external">immutable.js</a>。</p>
<p>reference: <a href="http://boke.io/immutable-js/" target="_blank" rel="external">搞定immutable.js</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以下開發情境為 ES2015（ES6）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般在寫 React 的時候，通常會希望資料是 immutable（不可變的），讓開發時對資料的流向即處理更容易，所以通常會使用 &lt;code&gt;Object.assign&lt;/code&gt; 來複制 object。但今天在寫時遇到一個問題，我一直以為 &lt;code&gt;Object.assign&lt;/code&gt; 會連同子項目都複製，結果兩個不同的資料改 A 竟然連 B 都跟著動，就做個紀錄。&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://jigsawye.com/categories/note/"/>
    
    
      <category term="javascript" scheme="http://jigsawye.com/tags/javascript/"/>
    
      <category term="trap" scheme="http://jigsawye.com/tags/trap/"/>
    
  </entry>
  
  <entry>
    <title>JSDC 2015 會後筆記（Day 1）</title>
    <link href="http://jigsawye.com/2015/10/05/jsdc-2015-day-1/"/>
    <id>http://jigsawye.com/2015/10/05/jsdc-2015-day-1/</id>
    <published>2015-10-05T05:32:21.000Z</published>
    <updated>2016-01-18T12:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>JSDC 全名是 JavaScript Developer Conference，是台灣所有 JavaScript 開發者的年度盛會。</p>
<p>今年 JSDC 的 <strong>Build anything with JavaScript</strong> 包含了 iOS App、Android App、Arduino…等等，涵蓋了各式各樣的議題，不僅僅侷限於 Web，會後也有 Lighting talk 這種有趣的活動，讓會眾也能參與議題分享，還有吃（X）。整體來說 JSDC 是每年吸收 JavaScript 新知的好活動。</p>
<a id="more"></a>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>第一天比較辛苦的就是活動在台北，而我人在台中，所以五點左右就起床準備搭車了，到了中研院也差不多快九點了。這裡就把我聽的幾場 topic 做簡單的紀錄。</p>
<h3 id="React-Navigation-System"><a href="#React-Navigation-System" class="headerlink" title="React Navigation System"></a>React Navigation System</h3><p>這場的講者是 Hedger，是 Facebook 的 React Native 開發者。主要在分享開發 facebook ads manager 所遇到的一些問題：因為 web 與 app 的 navigation 實作機制的不同，他們想解決這個問題，做出可以跨平台的 navigation。</p>
<p>我理解無誤的話（說實話這場對我來說有點 high level，有些地方聽不太懂），他們自幹了一個在頂層的 navigation 來管理所有的 route，取代掉原生 App 的機制，不過因為剛開始投影機有點怪，所以簡報不清楚，我也沒看清楚他是如何實作的。</p>
<p>在這場唯一理解到的就是，React Native 是個很厲害的技術，聽到他們將 App 由 iOS 移轉到 Android 上竟然 reuse 80% 的 Code，實在是很令人欽佩啊，有機會一定要實做看看。</p>
<h3 id="JavaScript-開發流程自動化懶人包"><a href="#JavaScript-開發流程自動化懶人包" class="headerlink" title="JavaScript 開發流程自動化懶人包"></a>JavaScript 開發流程自動化懶人包</h3><p>講者講述在開發 JavaScript 時的 workflow，其實有點像在介紹 DevOps 該做的事情。不過因為我自己也有在研究 DevOps 的相關技術，所以在聽時就比較像在複習一般。但是講者有提到很多沒用過的工具，當然就先把名字抄起來等日後有時間再研究啦。</p>
<h3 id="用JavaScript實現微電腦自動控制不是夢！"><a href="#用JavaScript實現微電腦自動控制不是夢！" class="headerlink" title="用JavaScript實現微電腦自動控制不是夢！"></a>用JavaScript實現微電腦自動控制不是夢！</h3><p>只能說這講者太猛了，前面在講 JavaScript 與 Arduino，使用哪些 Library，實作 Led、Motor、Servo…等等，這些其實都不新奇，剛開始還覺得怎麼在分享這麼稀鬆平常的東西。接著講到機械手臂時我倒覺得滿厲害的！沒想到接下來的東西真的讓我跪在會場了…他花了三個月的時間自幹了一台 CNC 機器（沒錯，從零開始自己買零件組裝），還自幹了 Web UI 來控制（<a href="https://github.com/cheton/cnc.js" target="_blank" rel="external">cnc.js</a>）。最讓我佩服的是，他是一個 F2E Developer，竟然在做 Maker 做的事，整體完成度還相當高。</p>
<p><img src="http://cheton.github.io/jsdc2015/images/demo/cnc/cnc-sample-sanding.jpg" alt=""></p>
<div class="video-container"><iframe src="//www.youtube.com/embed/fJyq4fyiGSc" frameborder="0" allowfullscreen></iframe></div>
<h3 id="Building-Single-Page-Apps-with-Aurelia"><a href="#Building-Single-Page-Apps-with-Aurelia" class="headerlink" title="Building Single-Page Apps with Aurelia"></a>Building Single-Page Apps with Aurelia</h3><p>這場請到 <a href="http://aurelia.io/" target="_blank" rel="external">Aurelia</a> 的 contributor <a href="https://github.com/davismj" target="_blank" rel="external">Matt</a> 分享 SPA（Single Page Application）與 Aurelia。開頭在講解 SPA 的一些眉眉角角，接著就介紹 Aurelia 及它的一些特性。</p>
<p>其實之前就看過 Aurelia 這個 Framework，JavaScript 用到了 ES7（ES 2015），是相當前衛的 Framework，雖然自己沒有寫過，不過感覺未來會崛起，與 React 及 Angular 並行。</p>
<h3 id="技術演進的大亂鬥"><a href="#技術演進的大亂鬥" class="headerlink" title="技術演進的大亂鬥"></a>技術演進的大亂鬥</h3><p>基本上就是介紹目前 Front-end 在使用的一些技術，講題中大概 90% 都有聽過，所以沒有很難理解。只是有點感傷，前端技術真的不停的在轉換。</p>
<blockquote><p>學 frontend 很倒霉（認同請分享）</p>
<footer><strong>Casear Chu</strong><cite>JSDC 2015</cite></footer></blockquote>
<img src="/2015/10/05/jsdc-2015-day-1/01.png" alt="01.png" title="">
<h3 id="Transducer"><a href="#Transducer" class="headerlink" title="Transducer"></a>Transducer</h3><p>慚愧啊…這場聽到睡著，從 mapreduce 之後都沒聽到，不過感覺滿像在上數學課的，當時位置也做很後面，看不太到簡報，滿累的一場。</p>
<h3 id="TDD-的開發哲學，以-nodejs-為例"><a href="#TDD-的開發哲學，以-nodejs-為例" class="headerlink" title="TDD 的開發哲學，以 nodejs 為例"></a>TDD 的開發哲學，以 nodejs 為例</h3><p>講者是在業界有開發多年經驗的開發者，目前擔任 leader，主要是在講述在開發時使用 TDD 的心法跟介紹。其實關於 test 我自己也有嘗試練習過，也看過很多文件跟心得，不過一直很難在實作中用上。</p>
<p>結束後我問了講者幾個問題，主要是問怎麼將測試導入至專案中，其實在寫測試時最讓我困惑的大概就是寫出完整的測試程式，但是有些測試又不太好寫，講者給我的建議是：「由大功能好寫的測試先寫，再逐一切分功能寫測試」。所以目前正在研究 test 的部分，畢竟 test 的優點是在任何程式語言都能用到的技巧，只要學起來必定能在各個語言中如魚得水。</p>
<h3 id="Web-Components-amp-the-next-generation-ADs"><a href="#Web-Components-amp-the-next-generation-ADs" class="headerlink" title="Web Components &amp; the next generation ADs"></a>Web Components &amp; the next generation ADs</h3><p>這場根本是第一天的壓軸XD，太好笑了。講者 Paul 演講起很正經，可是又會穿插很好笑的梗！這場講的 Web Component 是個很厲害的技術，把 HTML5 都包裝成 Component，可以直接在 HTML 中使用，未來可能會成為主流，不過現在的<a href="http://caniuse.com/#search=component" target="_blank" rel="external">支援度</a>實在是太差了，只有 Google Chrome 全數支援，期待未來幾年在其他瀏覽器中實作。接著講到 Web Component 在廣告中的應用，真的讓 UX 提升一定的級數，之後的 E2E Test Demo 也很驚艷，讓會眾都相當激動XD。</p>
<h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a><a href="/2015/10/07/jsdc-2015-day-2/">Day 2</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSDC 全名是 JavaScript Developer Conference，是台灣所有 JavaScript 開發者的年度盛會。&lt;/p&gt;
&lt;p&gt;今年 JSDC 的 &lt;strong&gt;Build anything with JavaScript&lt;/strong&gt; 包含了 iOS App、Android App、Arduino…等等，涵蓋了各式各樣的議題，不僅僅侷限於 Web，會後也有 Lighting talk 這種有趣的活動，讓會眾也能參與議題分享，還有吃（X）。整體來說 JSDC 是每年吸收 JavaScript 新知的好活動。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://jigsawye.com/categories/life/"/>
    
    
      <category term="jsdc-2015" scheme="http://jigsawye.com/tags/jsdc-2015/"/>
    
      <category term="jsdc" scheme="http://jigsawye.com/tags/jsdc/"/>
    
      <category term="conference" scheme="http://jigsawye.com/tags/conference/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 建置 Gitlab CE 的 Source Control 及 CI 環境</title>
    <link href="http://jigsawye.com/2015/09/25/gitlab-ce-in-docker/"/>
    <id>http://jigsawye.com/2015/09/25/gitlab-ce-in-docker/</id>
    <published>2015-09-25T11:23:30.000Z</published>
    <updated>2016-01-18T12:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文建議了解 unix-like 基礎指令及 Docker 基本操作者閱讀。</p>
</blockquote>
<p>這幾天在我們的 imaclab 試著建置 CI 環境，順便就學了 Docker，發現 Docker 這東西真的非常方便，直接把環境都放進 container 裡，也不怕把環境搞爛。對環境建置的苦手真的是一番福音，網路上也很多關於 Docker 的文章，在這邊也不贅述了。<br>原本在架設的時候想使用 Gitlab + Jenkins，不過因專案的需求沒有需要 Jenkins 這麼開放客製化的 CI 工具（其實是我覺得很囉唆一堆東西要設定），剛好 Gitlab 也有提供 CI，需求上也符合，所以就決定使用 Gitlab + Gitlab CI。</p>
<a id="more"></a>
<!-- toc -->
<h2 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h2><p>以自行架設私有的版本控制環境來說，Gitlab 肯定是首選（因為我不知道還有哪些版控可以自己架），很久以前曾經自己在 ubuntu 上用官方提供的一鍵安裝包裝過一次，用過這種懶人包的都知道，裝的時候完全不知道發生什麼事，尤其當時還很菜。那時是成功架起來沒錯，不過完全不知道發生了什麼事。</p>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>我是直接用了學長架的 OpenStack 叢集開一個 instance 當建置環境，基本上要照這份筆記安裝 Gitlab CE，應該只要隨便一個有裝 Docker 的 unix-like 系統都可以。</p>
<img src="/2015/09/25/gitlab-ce-in-docker/01.png" alt="01.png" title="">
<h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>透過 Docker 安裝 Gitlab CE 很簡單，只要在 <a href="https://hub.docker.com" target="_blank" rel="external">Docker Hub</a> 上找 gitlab 就可以找到很多的 images，我選了 star 最多的 <a href="https://hub.docker.com/r/sameersbn/gitlab/" target="_blank" rel="external">sameersbn/gitlab</a> ，基本上只要照 image 的文件做就可以了。</p>
<p>首先將 <code>sameersbn/gitlab</code> 的 image pull 下來。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull sameersbn/gitlab:8.0.2</div></pre></td></tr></table></figure>
<p>接著有兩種方式可以啟動 Gitlab：最簡單的是使用 <code>docker-compose</code>，透過設定檔啟動。另外就是手動執行 <code>docker run</code> 指令將 gitlab 所需的 service 逐一啟動。這邊我選擇後者，因為我沒裝 docker-compose，未來有安裝在補充這部分的使用方式。</p>
<p>除了 Gitlab 本身，他還需要額外啟用 <code>PostgreSQL</code> 及 <code>Redis</code> 的 servcie，基本上只要按照文件啟動 container 就可以了：</p>
<p>啟動 PostgreSQL container：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab-postgresql <span class="_">-d</span> \</div><div class="line">    --env <span class="string">'DB_NAME=gitlabhq_production'</span> \</div><div class="line">    --env <span class="string">'DB_USER=gitlab'</span> --env <span class="string">'DB_PASS=password'</span> \</div><div class="line">    --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \</div><div class="line">    sameersbn/postgresql:9.4-3</div></pre></td></tr></table></figure>
<p>啟動 Redis container：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab-redis <span class="_">-d</span> \</div><div class="line">    --volume /srv/docker/gitlab/redis:/var/lib/redis \</div><div class="line">    sameersbn/redis:latest</div></pre></td></tr></table></figure>
<p>最後啟動 Gitlab container。這邊要注意我除了照原文件之外，還額外加上 <code>GITLAB_HOST</code>，因為我的建置環境不在本機上，所以要加上該環境的 ip，否則 user 的大頭貼會是死圖。另外指令中的 <code>long-and-random-alpha-numeric-string</code> 請替換成一組隨機字串，可以使用 <code>pwgen -Bsv1 64</code> 來產生：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab <span class="_">-d</span> \</div><div class="line">    --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \</div><div class="line">    --publish 10022:22 --publish 10080:80 \</div><div class="line">    --env <span class="string">'GITLAB_HOST=your-gitlab-ip'</span> \</div><div class="line">    --env <span class="string">'GITLAB_PORT=10080'</span> --env <span class="string">'GITLAB_SSH_PORT=10022'</span> \</div><div class="line">    --env <span class="string">'GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string'</span> \</div><div class="line">    --volume /srv/docker/gitlab/gitlab:/home/git/data \</div><div class="line">    sameersbn/gitlab:8.0.2</div></pre></td></tr></table></figure>
<h3 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h3><img src="/2015/09/25/gitlab-ce-in-docker/02.png" alt="02.png" title="">
<p>打開瀏覽器瀏覽 <code>http://your-gitlab-ip:10080</code>，就可以看到 Gitlab 架設好了，輸入預設的帳號密碼就可以直接登入：</p>
<ul>
<li>username: <strong>root</strong></li>
<li>password: <strong>5iveL!fe</strong></li>
</ul>
<h2 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title="Gitlab CI"></a>Gitlab CI</h2><p>這次安裝的時候原本第一天裝 Gitlab CE 7.14.3，Gitlab CI 還要另外做安裝，後來更新到 8.0.0 的時候 Gitlab 把 CI 整合進了 Gitlab CE 裡，所以只需要裝 Gitlab CE 就包含了 CI 的功能了！兩個願望一次滿足！</p>
<p>以下以簡單的 Node.js project 為例，做一次完整的 CI Flow：</p>
<h3 id="建立-repository"><a href="#建立-repository" class="headerlink" title="建立 repository"></a>建立 repository</h3><p>首先在 Gitlab 上建立一個 <code>ci-flow</code> 的 repository：</p>
<img src="/2015/09/25/gitlab-ce-in-docker/03.png" alt="03.png" title="">
<p>接著點選 CI 選項，點選 <strong>Add project to CI</strong> 將剛剛建立的 <code>ci-flow</code> 加入至 CI 中：</p>
<img src="/2015/09/25/gitlab-ce-in-docker/04.png" alt="04.png" title="">
<p>點選 runner 分頁，記下 url 及 token：</p>
<img src="/2015/09/25/gitlab-ce-in-docker/05.png" alt="05.png" title="">
<h3 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab-runner"></a>gitlab-runner</h3><p>什麼是 <code>gitlab-runner</code> 呢？簡單來說就是透過這個 runner 去執行 CI 所要執行的工作。例如我以 docker 做測試環境，runner 會建立預先設定好 image 的 container，CI 被觸發時會自動 start 該 container，並把 repository pull 至 container 內，接著執行指定的動作。在這部分我們要安裝及設定 <code>gitlab-runner</code>，並註冊讓它執行。</p>
<p>透過 Docker 安裝 gitlab-runner，參考<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/docker.md" target="_blank" rel="external">官方文件</a>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> --name gitlab-runner --restart always \</div><div class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</div><div class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</div><div class="line">  gitlab/gitlab-runner:latest</div></pre></td></tr></table></figure>
<p>執行 gitlab-runner 進行註冊，這邊的 url 及 token 就是剛剛 runner 分頁對應的資料。其餘部分根據需求做選擇，像我不需要 DB 的 Service 所以一律 enter 略過：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it gitlab-runner gitlab-runner register</div><div class="line"></div><div class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/ci )</div><div class="line">https://your-gitlab-ip:10080/ci</div><div class="line"></div><div class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner</div><div class="line">your-gitlab-ci-token</div><div class="line"></div><div class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner</div><div class="line">[86598ea6394b]: node-4.1.1</div><div class="line"></div><div class="line">INFO[0034] 08cc0e60 Registering runner... succeeded</div><div class="line">Please enter the executor: docker, docker-ssh, ssh, shell, parallels:</div><div class="line">[shell]: docker</div><div class="line"></div><div class="line">Please enter the Docker image (eg. ruby:2.1):</div><div class="line">node:4.1.1</div><div class="line"></div><div class="line">If you want to <span class="built_in">enable</span> mysql please enter version (X.Y) or enter latest?</div><div class="line"></div><div class="line">If you want to <span class="built_in">enable</span> postgres please enter version (X.Y) or enter latest?</div><div class="line"></div><div class="line">If you want to <span class="built_in">enable</span> redis please enter version (X.Y) or enter latest?</div><div class="line"></div><div class="line">If you want to <span class="built_in">enable</span> mongo please enter version (X.Y) or enter latest?</div><div class="line"></div><div class="line">INFO[0045] Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">'s running already the config should be automatically reloaded!</span></div></pre></td></tr></table></figure>
<p>現在前往 CI 的 runner 分頁應該就會看到 node-4.1.1 並且是 active 的。</p>
<img src="/2015/09/25/gitlab-ce-in-docker/06.png" alt="06.png" title="">
<blockquote>
<p>注意，這邊我們要編輯 node-4.1.1 這個 runner，並增加名為 node-4.1.1 的 tag 讓 CI 能夠啟動對應的 runner。</p>
</blockquote>
<img src="/2015/09/25/gitlab-ce-in-docker/07.png" alt="07.png" title="">
<h3 id="建立-project"><a href="#建立-project" class="headerlink" title="建立 project"></a>建立 project</h3><p>建立一個 project，並使用 <code>npm init</code>（enter 到底就可以了）產生 <code>package.json</code>，接著安裝 node.js 的測試工具 <code>mocha</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir ci-flow</div><div class="line"><span class="built_in">cd</span> ci-flow</div><div class="line">npm init</div><div class="line">npm install mocha --save-dev</div></pre></td></tr></table></figure>
<p>接著建立檔案 <code>test/test.js</code> 並撰寫簡單的測試程式：</p>
<figure class="highlight js"><figcaption><span>test/test.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"></div><div class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">'should return -1 when the value is not present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      assert.equal(<span class="number">-1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].indexOf(<span class="number">5</span>));</div><div class="line">      assert.equal(<span class="number">-1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].indexOf(<span class="number">0</span>));</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>寫完測試當然要在 local 測試一下，直接執行 project 中安裝的 <code>./node_modules/mocha/bin/mocha</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ./node_modules/mocha/bin/mocha</div><div class="line"></div><div class="line">  Array</div><div class="line">    <span class="comment">#indexOf()</span></div><div class="line">      ✓ should <span class="built_in">return</span> -1 when the value is not present</div><div class="line"></div><div class="line"></div><div class="line">  1 passing (9ms)</div></pre></td></tr></table></figure>
<p>測試成功！接著我們來設定 CI 所要使用的 image 及執行的 script。</p>
<h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h3><p>重點來了，我們要在專案的根目錄建立 <code>.gitlab-ci.yml</code> 的檔案，用於決定 Gitlab CI 要如何對專案 build、test、deploy…等等，類似於 Travis CI 的 <code>.travis.yml</code>。詳細的可用選項可以參考<a href="http://doc.gitlab.com/ci/yaml/README.html" target="_blank" rel="external">官方文件</a>，這邊以我的例子做解說：<br><code>before_script</code> 是執行 job 前會執行的 script，我在這邊設定安裝 node 的 dependencies，也就是 <code>mocha</code> 這個 test tool。<code>stages</code> 為設定有幾種工作階段，一般可能就會有 <code>build</code>、<code>test</code>、<code>deploy</code>，並按照順序逐一執行對應的 job，我這邊單獨以 <code>test</code> 做例子。接著制定第一個 job，對應的就是 <code>test</code> 這個 stage，在 <code>script</code> 增加執行 project 內的 <code>mocha</code> 做測試，並指在 <code>master</code> 這個 branch，最後加上一個 <code>node-4.1.1</code> 的 tag 去啟動對應 tag 為 <code>node-4.1.1</code> 的 <code>gitlab-runner</code>，因為一般在測試時可能會針對多個不同版本的環境做測試，所以會使用 tag 這個功能來做設定。</p>
<figure class="highlight ruby"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">before_script:</span></div><div class="line">  - npm install</div><div class="line"><span class="symbol">stages:</span></div><div class="line">  - test</div><div class="line"><span class="symbol">job1:</span></div><div class="line">  <span class="symbol">stage:</span> test</div><div class="line">  <span class="symbol">script:</span></div><div class="line">    - ./node_modules/mocha/bin/mocha</div><div class="line">  <span class="symbol">only:</span></div><div class="line">    - master</div><div class="line">  <span class="symbol">tags:</span></div><div class="line">    - node-<span class="number">4.1</span>.<span class="number">1</span></div></pre></td></tr></table></figure>
<p>在版本控制上並不希望 <code>node_modules</code> 放入版本控制中，所以增加 <code>.gitignore</code> 檔案並排除該目錄：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch .gitignore</div><div class="line"><span class="built_in">echo</span> node_modules &gt; .gitignore</div></pre></td></tr></table></figure>
<p>加入版本控制：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">'Test gitlab-ci with &lt;3'</span></div></pre></td></tr></table></figure>
<p>Push 至 Repository：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin your-project-repository</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>最後等待 CI 自動執行測試！</p>
<h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><p>Push 至 Repository 後可以在 CI 的 Dashboard 看見剛剛的 commit 已經 pending 了：</p>
<img src="/2015/09/25/gitlab-ce-in-docker/08.png" alt="08.png" title="">
<p>點進去後可以看到目前須執行的所有 job，根據你的 <code>.gitlab-ci.yml</code> 而定，一般來說會在多個環境測試，並包含 deploy 等多種不同的 job：</p>
<img src="/2015/09/25/gitlab-ce-in-docker/09.png" alt="09.png" title="">
<p>等待一段時間後就成功就會顯示 Success：</p>
<img src="/2015/09/25/gitlab-ce-in-docker/10.png" alt="10.png" title="">
<p>你也可以點進 build 中看執行的結果：</p>
<img src="/2015/09/25/gitlab-ce-in-docker/11.png" alt="11.png" title="">
<h3 id="Slack-Integration"><a href="#Slack-Integration" class="headerlink" title="Slack Integration"></a>Slack Integration</h3><p>Gitlab CI 也有提供 Slack 的整合，提供即時的 CI 狀態，只要填入 Webhook 即可：</p>
<img src="/2015/09/25/gitlab-ce-in-docker/12.png" alt="12.png" title="">
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>搞了三天左右都在學 Docker 跟弄這些環境，在精疲力乏與中秋烤肉之際順便記錄一下過程。<br>文中一些細節可以在根據需求做修改，像是在 test 的 docker image 就可以把 <code>mocha</code> 裝進去，不用在 project 中額外安裝。Gitlab 的 CI 雖然不像 Jenkins CI 那麼容易的客製化，但是基本的功能也能滿足一些需求。當然 Gitlab CI 的功能我可能也沒完全摸透，可能有更強大的功能也說不定。</p>
<p>另外未來還會串上 CD，另外加開一台 staging 的 instance 來 deploy，之後若串起來有空再寫下一篇分享。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文建議了解 unix-like 基礎指令及 Docker 基本操作者閱讀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這幾天在我們的 imaclab 試著建置 CI 環境，順便就學了 Docker，發現 Docker 這東西真的非常方便，直接把環境都放進 container 裡，也不怕把環境搞爛。對環境建置的苦手真的是一番福音，網路上也很多關於 Docker 的文章，在這邊也不贅述了。&lt;br&gt;原本在架設的時候想使用 Gitlab + Jenkins，不過因專案的需求沒有需要 Jenkins 這麼開放客製化的 CI 工具（其實是我覺得很囉唆一堆東西要設定），剛好 Gitlab 也有提供 CI，需求上也符合，所以就決定使用 Gitlab + Gitlab CI。&lt;/p&gt;
    
    </summary>
    
      <category term="tutorial" scheme="http://jigsawye.com/categories/tutorial/"/>
    
    
      <category term="docker" scheme="http://jigsawye.com/tags/docker/"/>
    
      <category term="source-control" scheme="http://jigsawye.com/tags/source-control/"/>
    
      <category term="continuous-integration" scheme="http://jigsawye.com/tags/continuous-integration/"/>
    
      <category term="devops" scheme="http://jigsawye.com/tags/devops/"/>
    
      <category term="nodejs" scheme="http://jigsawye.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>在 Laravel 使用 Route Model Binding</title>
    <link href="http://jigsawye.com/2015/07/23/use-route-model-binding-in-laravel/"/>
    <id>http://jigsawye.com/2015/07/23/use-route-model-binding-in-laravel/</id>
    <published>2015-07-23T08:56:49.000Z</published>
    <updated>2016-02-04T06:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文適用於 Laravel 5.0 以上版本。</p>
</blockquote>
<h2 id="什麼是-Route-Model-Binding？"><a href="#什麼是-Route-Model-Binding？" class="headerlink" title="什麼是 Route Model Binding？"></a>什麼是 Route Model Binding？</h2><blockquote>
<p>Laravel model binding provides a convenient way to inject class instances into your routes. For example, instead of injecting a user’s ID, you can inject the entire User class instance that matches the given ID.<br>(<a href="http://laravel.com/docs/5.0/routing#route-model-binding" target="_blank" rel="external">http://laravel.com/docs/5.0/routing#route-model-binding</a>)</p>
</blockquote>
<a id="more"></a>
<p>中文版：</p>
<blockquote>
<p>Laravel 模型綁定提供方便的方式將模型實例注入到你的路由中。例如，比起注入 User 的 ID ，你可以選擇注入符合給定 ID 的 User 類別實例。<br>(<a href="http://laravel.tw/docs/5.0/routing#route-model-binding" target="_blank" rel="external">http://laravel.tw/docs/5.0/routing#route-model-binding</a>)</p>
</blockquote>
<p>文字敘述不懂沒關係，更快的方式就是舉個例子，假設我們有一個 Resource Route 及對應的 Resource Controller：<br><figure class="highlight php"><figcaption><span>route.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Route::resource(<span class="string">'articles'</span>, <span class="string">'ArticlesController'</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight php"><figcaption><span>ArticlesController.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticlesController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 省略七個標準 RESTful method</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般來說，在 <code>show</code> method 裡我們通常會這樣實作：<br><figure class="highlight php"><figcaption><span>ArticlesController.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line">&#123;</div><div class="line">    $article = Article::find($id);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> view(<span class="string">'articles.show'</span>, compact(<span class="string">'article'</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是只要透過 Route Model Binding，我們的程式碼就可以改成這樣：<br><figure class="highlight php"><figcaption><span>ArticlesController.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(Article $article)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> view(<span class="string">'articles.show'</span>, compact(<span class="string">'article'</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>對於我這種超懶的開發者很受用，少寫一行算一行，幫助開發更快速。</p>
<h2 id="設定-Route-Model-Binding"><a href="#設定-Route-Model-Binding" class="headerlink" title="設定 Route Model Binding"></a>設定 Route Model Binding</h2><h4 id="綁定-Model"><a href="#綁定-Model" class="headerlink" title="綁定 Model"></a>綁定 Model</h4><p>一般來說都會將綁定設定在 <code>RouteServiceProvider</code> （App/Provider/RouteServiceProvider.php）中，在這裡我用上述的範例做綁定：<br><figure class="highlight php"><figcaption><span>RouteServiceProvider.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(Router $router)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">parent</span>::boot($router);</div><div class="line"></div><div class="line">    $router-&gt;bind(<span class="string">'articles'</span>, <span class="string">'App\Article'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接著在我們的 method 直接使用 type-hine 注入 Model，就可以直接存取 <code>$article</code> 了：<br><figure class="highlight php"><figcaption><span>ArticleController.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(Article $article)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> view(<span class="string">'article.show'</span>, compact(<span class="string">'article'</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也就是說，如果 Request 是 <code>/articles/7</code>，那麼 <code>$article</code> 就會是 <code>Article::findOrFail(7)</code>，若該筆資料不存在則會拋出 404。</p>
<h2 id="綁定做了什麼？"><a href="#綁定做了什麼？" class="headerlink" title="綁定做了什麼？"></a>綁定做了什麼？</h2><p>那麼 <code>bind</code> 做了什麼事呢？讓我們看一下 Route list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+-----------+---------------------------+------------------+----------------------------+</div><div class="line">| Method    | URI                       | Name             | Action                     |</div><div class="line">+-----------+---------------------------+------------------+----------------------------+</div><div class="line">| GET|HEAD  | articles                  | articles.index   | ArticlesController@index   |</div><div class="line">| GET|HEAD  | articles/create           | articles.create  | ArticlesController@create  |</div><div class="line">| POST      | articles                  | articles.store   | ArticlesController@store   |</div><div class="line">| GET|HEAD  | articles/&#123;articles&#125;       | articles.show    | ArticlesController@show    |</div><div class="line">| GET|HEAD  | articles/&#123;articles&#125;/edit  | articles.edit    | ArticlesController@edit    |</div><div class="line">| PUT       | articles/&#123;articles&#125;       | articles.update  | ArticlesController@update  |</div><div class="line">| PATCH     | articles/&#123;articles&#125;       | articles         | ArticlesController@update  |</div><div class="line">| DELETE    | articles/&#123;articles&#125;       | articles.destroy | ArticlesController@destroy |</div><div class="line">+-----------+---------------------------+------------------+----------------------------+</div></pre></td></tr></table></figure></p>
<p>注意到有 <code>{articles}</code> 的 Route，這邊的變數 <code>articles</code> 也就是我們在 <code>bind()</code>傳入的第一個參數，Route Model Binding 會自動在你綁定的 Model（第二個參數 <code>\App\Article</code>） 搜尋（<code>findOrFail</code>）主鍵為 <code>{articles}</code> 的資料。所以不只在 <code>show</code> method，只要任何有 <code>{articles}</code> 的 Route 都會自動做綁定，相當的方便（懶人）。</p>
<h2 id="自定搜尋條件"><a href="#自定搜尋條件" class="headerlink" title="自定搜尋條件"></a>自定搜尋條件</h2><p>有些情況並不適用於預設的 <code>Model::findOrFail($id)</code>，例如只希望找出已經發佈的 Article，這時候可以改變 <code>bind()</code> 的第二個參數為包含自訂搜尋的條件的 Closure：<br><figure class="highlight php"><figcaption><span>RouteServiceProvider.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(Router $router)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">parent</span>::boot($router);</div><div class="line"></div><div class="line">    $router-&gt;bind(<span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> \App\Article::where(<span class="string">'published_at'</span>, <span class="string">'&lt;='</span>, Carbon::now())-&gt;findOrFail($id);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此你已經瞭解如何運用 Route Model Binding 囉！未來如果搭上 Form Model binding 在開發上會更加的快速（懶人）！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文適用於 Laravel 5.0 以上版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什麼是-Route-Model-Binding？&quot;&gt;&lt;a href=&quot;#什麼是-Route-Model-Binding？&quot; class=&quot;headerlink&quot; title=&quot;什麼是 Route Model Binding？&quot;&gt;&lt;/a&gt;什麼是 Route Model Binding？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Laravel model binding provides a convenient way to inject class instances into your routes. For example, instead of injecting a user’s ID, you can inject the entire User class instance that matches the given ID.&lt;br&gt;(&lt;a href=&quot;http://laravel.com/docs/5.0/routing#route-model-binding&quot;&gt;http://laravel.com/docs/5.0/routing#route-model-binding&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tutorial" scheme="http://jigsawye.com/categories/tutorial/"/>
    
    
      <category term="laravel" scheme="http://jigsawye.com/tags/laravel/"/>
    
      <category term="laravel5" scheme="http://jigsawye.com/tags/laravel5/"/>
    
      <category term="route-model-binding" scheme="http://jigsawye.com/tags/route-model-binding/"/>
    
  </entry>
  
  <entry>
    <title>在 Laravel 5 使用 PJAX 加快網頁載入速度</title>
    <link href="http://jigsawye.com/2015/06/22/using-pjax-with-laravel-5/"/>
    <id>http://jigsawye.com/2015/06/22/using-pjax-with-laravel-5/</id>
    <published>2015-06-22T03:50:48.000Z</published>
    <updated>2016-02-04T06:12:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文適用於 Laravel 5.0 以上版本。</p>
</blockquote>
<h2 id="什麼是-PJAX-？"><a href="#什麼是-PJAX-？" class="headerlink" title="什麼是 PJAX ？"></a>什麼是 PJAX ？</h2><p>簡單來說，以往使用的 <code>AJAX</code> 可以不重新載入網頁，異步載入伺服器的資料，並更新畫面。而 <code>PJAX</code> 則是加入了 HTML5 的 <code>PushState</code> 技術，在取得資料的同時改變 Url，可以保留瀏覽器上一頁的功能，而且不會從伺服器重新載入 js 及 css 之類的靜態檔案，加快網頁的載入速度。<br><a id="more"></a></p>
<h2 id="開始上手"><a href="#開始上手" class="headerlink" title="開始上手"></a>開始上手</h2><h4 id="伺服器端安裝-jacobbennett-pjax"><a href="#伺服器端安裝-jacobbennett-pjax" class="headerlink" title="伺服器端安裝 jacobbennett/pjax"></a>伺服器端安裝 <code>jacobbennett/pjax</code></h4><p>在 Laravel 我們需要安裝 <code>jacobbennett/pjax</code> 這隻 Package（<a href="https://github.com/JacobBennett/pjax" target="_blank" rel="external">Github</a>），他會根據 Request 是否為 PJAX 來回傳對應資料。安裝請直接修改 <code>composer.json</code>：<br><figure class="highlight js"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="string">"require"</span>: &#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"jacobbennett/pjax"</span>: <span class="string">"0.*"</span>,</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>接著執行 <code>composer update</code> 或是 <code>composer install</code> 安裝 package。</p>
<p>安裝完成後，我們要把 <code>jacobbennett/pjax</code> 的 middleware 加到我們預設的 middleware 中，打開 <code>app/Http/Kernel.php</code>，在 <code>$middleware</code> 增加：<br><figure class="highlight php"><figcaption><span>app/Http/Kernel.php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">protected</span> $middleware = [</div><div class="line">    ...</div><div class="line">    <span class="string">'JacobBennett\Pjax\PjaxMiddleware'</span>,</div><div class="line">];</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>這樣 Laravel 的部分就準備完成了。</p>
<h4 id="前端安裝-jQuery-pjax"><a href="#前端安裝-jQuery-pjax" class="headerlink" title="前端安裝 jQuery.pjax"></a>前端安裝 <code>jQuery.pjax</code></h4><p>前端部分使用 <code>jQuery.pjax</code> 這隻 Library，<code>jQuery.pjax</code> 是基於 jQuery，並封裝了 pushState 與 AJAX ，讓你更容易使用 PJAX 的 Library，關於此 Library 可以參閱 <a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="external">jQuery.pjax 的 Github</a>。另外 <code>jQuery.pjax</code> 依賴於 <code>jQuery 1.8.x</code> 以上，所以安裝前請確保你的專案有載入 <code>jQuery</code>。</p>
<p>下載 <code>jquery.pjax.js</code> 至你的專案中，本範例下載至專案的 <code>/public/javascripts</code> 資料夾，我習慣使用 <code>wget</code>，你可以使用你習慣的方式下載，像是 <code>curl</code> 或是直接用瀏覽器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -P public/javascripts https://raw.github.com/defunkt/jquery-pjax/master/jquery.pjax.js</div></pre></td></tr></table></figure></p>
<p>接著在你的 <code>views</code> 中載入檔案：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; assets('javascripts/jquery.pjax.js') &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最後增加 JavaScript：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    $(<span class="built_in">document</span>).pjax(<span class="string">'a'</span>, <span class="string">'body'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上方程式的第一個參數代表會攔截所有的 <code>a</code> 標籤，若瀏覽器有支援就改以 PJAX 的方式送出，第二個參數代表接收到的資料替換至 <code>body</code>。</p>
<p>另外，PushState 有瀏覽器支援的問題（萬惡的 IE），支援度可以至 <a href="http://caniuse.com/#search=pushstate" target="_blank" rel="external">Can I use</a> 查看，不過這不用擔心，若瀏覽器不支援 PushState，就會以原始方式打開超連結。</p>
<h4 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h4><p>完成上面的步驟後你的專案就擁有 PJAX 的功能了，打開 Devtools 的 Network 畫面，點擊任一 <code>a</code> 標籤，就會看到帶有 <code>_pjax=body</code> 的 Request ，接著畫面就會更新了！</p>
<p><img src="http://i.imgur.com/xrKP9S0.png" alt=""></p>
<h2 id="加上載入動畫"><a href="#加上載入動畫" class="headerlink" title="加上載入動畫"></a>加上載入動畫</h2><p>不過這樣的 UX 不是很好，有時點擊連結後有某些原因造成等待的時間較久，使用者可能覺得沒反應就會重新載入，或是重複點擊，這樣的效果並不好，所以我們要加上載入動畫，實作效果可以參考 Youtube（下圖畫面上方的紅色讀取條）。</p>
<p><img src="http://i.imgur.com/rXvQMSS.png" alt=""></p>
<h4 id="安裝-nprogress-js"><a href="#安裝-nprogress-js" class="headerlink" title="安裝 nprogress.js"></a>安裝 nprogress.js</h4><p><code>nprogress.js</code> 是一個載入動畫的 Library，效果可以參考<a href="http://ricostacruz.com/nprogress/" target="_blank" rel="external">它的官方網站</a>，也可在<a href="https://github.com/rstacruz/nprogress" target="_blank" rel="external">它的 Github</a> 參考使用的 API。</p>
<p>下載檔案至專案中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget -P public/javascripts http://ricostacruz.com/nprogress/nprogress.js</div><div class="line">$ wget -P public/stylesheets http://ricostacruz.com/nprogress/nprogress.css</div></pre></td></tr></table></figure></p>
<p>接著在 <code>views</code> 載入檔案：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; asset('stylesheets/nprogress.css') &#125;&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; assets('javascripts/nprogress.js') &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最後把效果加到 PJAX 的生命週期中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    $(<span class="built_in">document</span>).pjax(<span class="string">'a'</span>, <span class="string">'body'</span>);</div><div class="line"></div><div class="line">    $(<span class="built_in">document</span>).on(<span class="string">'pjax:start'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        NProgress.start();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $(<span class="built_in">document</span>).on(<span class="string">'pjax:end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        NProgress.done();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="噹啷！完成！"><a href="#噹啷！完成！" class="headerlink" title="噹啷！完成！"></a>噹啷！完成！</h4><p>至此你的專案已經擁有完整的 PJAX 了！</p>
<h2 id="Q-amp-A："><a href="#Q-amp-A：" class="headerlink" title="Q &amp; A："></a>Q &amp; A：</h2><p>Q：我不喜歡 nprogress 的效果，有沒有別的可以用？<br>A：你可以考慮使用 <a href="http://github.hubspot.com/pace/docs/welcome/" target="_blank" rel="external">PACE</a>、<a href="http://usablica.github.io/progress.js/" target="_blank" rel="external">Progress.js</a>，不過我都沒使用過，但方式應該是大同小異。</p>
<p>Q：為什麼我的一些 JavaScript Library 會爆掉沒反應？<br>A：你使用的 Library 如果需要在畫面載入完時重新初始化（像是 <a href="http://portfoliojs.com/" target="_blank" rel="external">portfolio.js</a>），請把相關程式碼放入 <code>PJAX</code> 的生命週期中，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'pjax:end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    initPortfolio();</div><div class="line">    NProgress.done();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>有其他問題也可以留言，我會盡力幫助你的 :)</p>
<p>References: <a href="https://phphub.org/topics/44" target="_blank" rel="external">PHPHub</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文適用於 Laravel 5.0 以上版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什麼是-PJAX-？&quot;&gt;&lt;a href=&quot;#什麼是-PJAX-？&quot; class=&quot;headerlink&quot; title=&quot;什麼是 PJAX ？&quot;&gt;&lt;/a&gt;什麼是 PJAX ？&lt;/h2&gt;&lt;p&gt;簡單來說，以往使用的 &lt;code&gt;AJAX&lt;/code&gt; 可以不重新載入網頁，異步載入伺服器的資料，並更新畫面。而 &lt;code&gt;PJAX&lt;/code&gt; 則是加入了 HTML5 的 &lt;code&gt;PushState&lt;/code&gt; 技術，在取得資料的同時改變 Url，可以保留瀏覽器上一頁的功能，而且不會從伺服器重新載入 js 及 css 之類的靜態檔案，加快網頁的載入速度。&lt;br&gt;
    
    </summary>
    
      <category term="tutorial" scheme="http://jigsawye.com/categories/tutorial/"/>
    
    
      <category term="laravel" scheme="http://jigsawye.com/tags/laravel/"/>
    
      <category term="laravel5" scheme="http://jigsawye.com/tags/laravel5/"/>
    
      <category term="pjax" scheme="http://jigsawye.com/tags/pjax/"/>
    
  </entry>
  
</feed>
